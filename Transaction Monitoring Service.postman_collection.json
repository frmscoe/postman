{
	"info": {
		"_postman_id": "56c2be66-3908-423d-a326-acb2ec7bb09e",
		"name": "Transaction Monitoring Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8089578"
	},
	"item": [
		{
			"name": "Pain001",
			"item": [
				{
					"name": "Test 1 -  Should receive the right incoming message with 200 HTTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"//updated AM-990",
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// AM-987 \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString() \r",
									"        let jsondata = JSON.parse(resBody) \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									")\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2.1 - dynamic dates (CreDtTm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"",
									"// Future Dates test case needs to be written in code. These two tests are just placeholder for future development.",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"CreDtTm should be now, not 2 days later\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"    pm.expect(jsonData.data.CstmrCdtTrfInitn.GrpHdr.CreDtTm).not.to.equal(moment().add(2, 'days').toISOString())",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    const moment = require('moment'); ",
									"    let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' ,messageID:'002'}), options: { raw: { language: 'json' } } } ",
									"    let requestz = pm.sendRequest(",
									"        {",
									"            url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getspecificpainmessage\",",
									"            method: \"POST\",",
									"            body: body",
									"        },function (err, res) {",
									"            if (err != null) {",
									"                console.error(err);",
									"            }",
									"            let resBody = new Buffer.from(res.stream).toString()",
									"            let jsondata = JSON.parse(resBody)",
									"            jsondata.CstmrCdtTrfInitn.GrpHdr.CreDtTm = moment().toISOString(); ",
									"            let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;",
									"            pm.collectionVariables.set(\"EndToEndId\", e2eID); ",
									"            pm.request.body.raw=jsondata;",
									"        }",
									"    ) "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2.1 - dynamic dates (PmtInf.ReqdExctnDt.Dt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"PmtInf.ReqdExctnDt.Dt should be now, not 2 days later\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"    pm.expect(jsonData.data.CstmrCdtTrfInitn.PmtInf.ReqdExctnDt.DtTm).not.to.equal(moment().add(2, 'days').toISOString())",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); ",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } ",
									"let requestz = pm.sendRequest(",
									"    {",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",",
									"        method: \"POST\",",
									"        body: body",
									"    },function (err, res) {",
									"        if (err != null) {",
									"            console.error(err);",
									"        }",
									"        let resBody = new Buffer.from(res.stream).toString()",
									"        let jsondata = JSON.parse(resBody)",
									"        jsondata.CstmrCdtTrfInitn.PmtInf.ReqdExctnDt.DtTm = moment().toISOString(); ",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);",
									"        pm.request.body.raw=jsondata;",
									"    }",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3.1 - blank fields (MsgId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.GrpHdr.MsgId has less length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    },function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.MsgId = \"\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID); \r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3.1 - blank fields (CreDtTm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"CreDtTm should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.GrpHdr.CreDtTm must be date-time format\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.CreDtTm = \"\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3.1 - blank fields (NbOfTxs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"NbOfTxs should not be null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.GrpHdr.CreDtTm must be date-time format\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    },function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.CreDtTm = \"nodate\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3.1 - blank fields (InitgPty.Nm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"InitgPty.Nm should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.GrpHdr.InitgPty.Nm is the wrong type\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.InitgPty.Nm = null; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.1 - happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response should be successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody) \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.2 - happy path (dynamic dates)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response should be successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); ",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } ",
									"let requestz = pm.sendRequest(",
									"    {",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",",
									"        method: \"POST\",",
									"        body: body",
									"    }, function (err, res) {",
									"        if (err != null) {",
									"            console.error(err);",
									"        }",
									"        let resBody = new Buffer.from(res.stream).toString()",
									"        let jsondata = JSON.parse(resBody) ",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.CreDtTm = moment().toISOString();  ",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);",
									"        pm.request.body.raw=jsondata;",
									"    }",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.3 - happy path (dynamic dates)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response should be successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); ",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } ",
									"let requestz = pm.sendRequest(",
									"    {",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",",
									"        method: \"POST\",",
									"        body: body",
									"    },function (err, res) {",
									"        if (err != null) {",
									"            console.error(err);",
									"        }",
									"        let resBody = new Buffer.from(res.stream).toString()",
									"        let jsondata = JSON.parse(resBody) ",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.CreDtTm = moment().toISOString(); ",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);",
									"        pm.request.body.raw=jsondata;",
									"    }",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.4 - happy path (dynamic dates)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response should be successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); ",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } ",
									"let requestz = pm.sendRequest(",
									"    {",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",",
									"        method: \"POST\",",
									"        body: body",
									"    },function (err, res) {",
									"        if (err != null) {",
									"            console.error(err);",
									"        }",
									"        let resBody = new Buffer.from(res.stream).toString()",
									"        let jsondata = JSON.parse(resBody) ",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.CreDtTm = moment().toISOString(); ",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);",
									"        pm.request.body.raw=jsondata;",
									"    }",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.5 - happy path (dynamic dates)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response should be successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } ",
									"let requestz = pm.sendRequest(",
									"    {",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",",
									"        method: \"POST\",",
									"        body: body",
									"    },function (err, res) {",
									"        if (err != null) {",
									"            console.error(err);",
									"        }",
									"        let resBody = new Buffer.from(res.stream).toString()",
									"        let jsondata = JSON.parse(resBody) ",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.CreDtTm = moment().toISOString(); ",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);",
									"        pm.request.body.raw=jsondata;",
									"    }",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.6 - happy path (dynamic uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response should be successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    },function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        myUUID= myUUID.replace('-','')\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.MsgId = myUUID; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.7 - happy path (dynamic uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response should be successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        myUUID= myUUID.replace('-','')\r",
									"        jsondata.CstmrCdtTrfInitn.PmtInf.PmtInfId = myUUID; \r",
									"       \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 6.1 - negative amounts (InstdAmt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"InstdAmt.Amt can not be negative\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.PmtInf.CdtTrfTxInf.Amt.InstdAmt.Amt.Amt is less than minimum\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"InstdAmt\", -1);\r",
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    },function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.PmtInf.CdtTrfTxInf.Amt.InstdAmt.Amt.Amt = -1; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 6.2- negative amounts (EqvtAmt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"InstdAmt.Amt can not be negative\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.PmtInf.CdtTrfTxInf.Amt.EqvtAmt.Amt.Amt is less than minimum\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"InstdAmt\", -1);\r",
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.PmtInf.CdtTrfTxInf.Amt.EqvtAmt.Amt.Amt = -1; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 7.1 - Value Overflow (MsgId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The swagger throw overflow value error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.GrpHdr.MsgId has longer length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"let random = Math.floor(Math.random() * 500)\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.MsgId = \"2669e349-500d-44ba-9e27-7767a16608a0-7767a16608a0-7767a16608a0\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 7.2 - Value Overflow (InitgPty.Nm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The swagger throw overflow value error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.GrpHdr.InitgPty.Nm has longer length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    },function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.InitgPty.Nm = \"Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 7.3 - Value Overflow (CityOfBirth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The swagger throw overflow value error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.GrpHdr.InitgPty.Id.PrvtId.DtAndPlcOfBirth.CityOfBirth has longer length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.InitgPty.Id.PrvtId.DtAndPlcOfBirth.CityOfBirth = \"UnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknown\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 7.4 - Value Overflow (CtryOfBirth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The swagger throw overflow value error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.PmtInf.Dbtr.Id.PrvtId.DtAndPlcOfBirth.CtryOfBirth has longer length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4(); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.PmtInf.Dbtr.Id.PrvtId.DtAndPlcOfBirth.CtryOfBirth= \"UnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknown\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 7.5 - Value Overflow (PmtInf. PmtInfId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The swagger throw overflow value error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.PmtInf.PmtInfId has longer length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4(); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    },function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.PmtInf.PmtInfId = \"b51ec534-ee48-4575-b6a9-ead2955b8069-ee48-4575-b6a9-ead2955b8069-ee48-4575-b6a9-ead2955b8069-ee48-4575-b6a9-ead2955b8069-ee48-4575-b6a9-ead2955b8069\";\r",
									"      \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 7.6 - Value Overflow (PmtInf. Prtry)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The swagger throw overflow value error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.PmtInf.ReqdAdvcTp.DbtAdvc.Prtry has longer length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } }\r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.PmtInf.ReqdAdvcTp.DbtAdvc.Prtry = \"Advice with transaction details Advice with transaction details Advice with transaction detailsAdvice with transaction details Advice with transaction details Advice with transaction details Advice with transaction details\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 7.2 - Value Overflow (InitgPty.Nm) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"The swagger throw overflow value error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CstmrCdtTrfInitn.GrpHdr.InitgPty.Nm has longer length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment'); \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain001' }), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    },function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CstmrCdtTrfInitn.GrpHdr.InitgPty.Nm = \"Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein Ivan Reese Russel-Klein\"; \r",
									"        let e2eID = JSON.parse(resBody).CstmrCdtTrfInitn.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/execute",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"execute"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pain013",
			"item": [
				{
					"name": "Submit a valid JSON input message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json().data; ",
									"    var jsonReq = pm.request.body.raw;",
									"    pm.expect(jsonData).to.eql(jsonReq);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013' }), options: { raw: { language: 'json' } } }\r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        resBody = resBody.replace(\"\\'\\/g\", \"\\\"\")\r",
									"        const jsondata = JSON.parse(resBody)\r",
									"        pm.request.body.raw = jsondata;\r",
									"    }\r",
									")\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank fields (credtTm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);  ",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.GrpHdr.CreDtTm must be date-time format\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.GrpHdr.CreDtTm = \"\";\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank fields (MsgId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.GrpHdr.MsgId has less length than allowed\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)\r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.GrpHdr.MsgId = \"\"; \r",
									"        pm.request.body.raw=jsondata;\r",
									" \r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank fields (NbofTxs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.GrpHdr.NbOfTxs is the wrong type\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)\r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.GrpHdr.NbOfTxs = \"\";\r",
									"        pm.request.body.raw=jsondata;\r",
									" \r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank fields (InitgPty.Nm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.GrpHdr.InitgPty.Nm is the wrong type\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)\r",
									" \r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.GrpHdr.InitgPty.Nm = null;\r",
									"        pm.request.body.raw=jsondata;\r",
									" \r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing fields (CdtrPmtActvtnReq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.TxTp is required\\ndata.CdtrPmtActvtnReq is required\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500) \r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        resBody = resBody.replace(\"CdtrPmtActvtnReq\", \"CdtrPmtActvtn\")\r",
									"        let jsondata = JSON.parse(resBody)  \r",
									"        pm.request.body=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing fields (TxTp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.TxTp is required\\ndata.CdtrPmtActvtnReq is required\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500) \r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        resBody = resBody.replace(\"TxTp\", \"Tx\")\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        pm.request.body=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boundary values(MsgId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.GrpHdr.MsgId has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.GrpHdr.MsgId = myUUID+myUUID+myUUID+myUUID+myUUID;\r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boundary values(CityOfBirth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.GrpHdr.InitgPty.Id.PrvtId.DtAndPlcOfBirth.CityOfBirth has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500) \r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.GrpHdr.InitgPty.Id.PrvtId.DtAndPlcOfBirth.CityOfBirth = \"UnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknown\";\r",
									" \r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boundary values(CtryOfBirth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.GrpHdr.InitgPty.Id.PrvtId.DtAndPlcOfBirth.CtryOfBirth has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500) \r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody); \r",
									"        jsondata.CdtrPmtActvtnReq.GrpHdr.InitgPty.Id.PrvtId.DtAndPlcOfBirth.CtryOfBirth = \"UnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknown\";\r",
									"        pm.collectionVariables.set(\"jsondata\", jsondata);\r",
									"        let e2eID = JSON.parse(resBody).CdtrPmtActvtnReq.GrpHdr.MsgId;\r",
									"       \r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boundary values(PmtInf.PmtInfId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.PmtInf.PmtInfId has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500) \r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.PmtInf.PmtInfId = myUUID + myUUID + myUUID + myUUID + myUUID + myUUID;\r",
									"      \r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boundary values (PmtInf.ReqdAdvcTp.DbtAdvc.Prtry)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.PmtInf.ReqdAdvcTp.DbtAdvc.Prtry has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500) \r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.PmtInf.ReqdAdvcTp.DbtAdvc.Prtry= \"UnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknownUnknown\";\r",
									"       \r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative Amounts (Amt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.PmtInf.CdtTrfTxInf.SplmtryData.Envlp.Doc.PyeeRcvAmt.Amt.Amt is less than minimum\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500) \r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.PmtInf.CdtTrfTxInf.SplmtryData.Envlp.Doc.PyeeRcvAmt.Amt.Amt  = -1;\r",
									"      \r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative Amounts (InstdAmt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    if (pm.response.code != 200) { ",
									"        console.error(pm.response.json().errors[0].error);",
									"    }",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"MsgId should not be blank\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.CdtrPmtActvtnReq.PmtInf.CdtTrfTxInf.Amt.InstdAmt.Amt.Amt is less than minimum\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"let random = Math.floor(Math.random() * 500)\r",
									"  \r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pain013'}), options: { raw: { language: 'json' } } } \r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.CdtrPmtActvtnReq.PmtInf.CdtTrfTxInf.Amt.InstdAmt.Amt.Amt  = -1;\r",
									"    \r",
									"        pm.request.body.raw=jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " "
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/quoteReply",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"quoteReply"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pacs002",
			"item": [
				{
					"name": "Test 1 - happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pacs002' }), options: { raw: { language: 'json' } } }\r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        //  jsondata.FIToFIPmtSts.GrpHdr.InitgPty.Nm = null; \r",
									"        let e2eID = JSON.parse(resBody).FIToFIPmtSts.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw = jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2.1 - blank fields (TxTp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"TxTp should not be blank\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.TxTp must be an enum value\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pacs002' }), options: { raw: { language: 'json' } } }\r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.TxTp = \"\"; \r",
									"        let e2eID = JSON.parse(resBody).FIToFIPmtSts.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw = jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2.2 - blank fields (FIToFIPmtSts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts should not be blank\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr is required\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pacs002' }), options: { raw: { language: 'json' } } }\r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        jsondata.FIToFIPmtSts = {}; \r",
									"        let e2eID = JSON.parse(resBody).FIToFIPmtSts.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw = jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2.3 - blank fields (FIToFIPmtSts.GrpHdr)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts.GrpHdr should not be blank\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr.MsgId is required\\ndata.FIToFIPmtSts.GrpHdr.CreDtTm is required\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pacs002' }), options: { raw: { language: 'json' } } }\r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"        \r",
									"        //minupulate data\r",
									"        jsondata.FIToFIPmtSts.GrpHdr = {}; \r",
									"\r",
									"        let e2eID = JSON.parse(resBody).FIToFIPmtSts.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw = jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2.4 - blank fields (FIToFIPmtSts.GrpHdr.MsgID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts.GrpHdr.MsgId should not be blank\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr.MsgId has less length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"let body = { mode: 'raw', raw: JSON.stringify({ messageType: 'pacs002' }), options: { raw: { language: 'json' } } }\r",
									"let requestz = pm.sendRequest(\r",
									"    {\r",
									"        url: \"https://frmfaas.sybrin.com/function/off-msg-waitron/getrandommessage\",\r",
									"        method: \"POST\",\r",
									"        body: body\r",
									"    }, function (err, res) {\r",
									"        if (err != null) {\r",
									"            console.error(err);\r",
									"        }\r",
									"        let resBody = new Buffer.from(res.stream).toString()\r",
									"        let jsondata = JSON.parse(resBody)\r",
									"\r",
									"        //minupulate data\r",
									"        jsondata.FIToFIPmtSts.GrpHdr.MsgId = \"\";\r",
									"        let e2eID = JSON.parse(resBody).FIToFIPmtSts.GrpHdr.MsgId;\r",
									"        pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"        pm.request.body.raw = jsondata;\r",
									"    }\r",
									") "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\",\n  \"FIToFIPmtSts\": {\n    \"GrpHdr\": {\n      \"MsgId\": \"\",\n      \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\n    },\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16-467a-4ac4-ba32-eb518646aa1d\",\n      \"OrgnlEndToEndId\": \"5cb8a2db-5c32-41bb-ac27-2597125d50fd\",\n      \"TxSts\": \"ACSC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3.1 - missing fields (TxTp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"TxTp should not be missing\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.TxTp is required\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"FIToFIPmtSts\": {\n    \"GrpHdr\": {\n      \"MsgId\": \"ec3a6a10-0c31-4564-94f6-ed1d79fed91f\",\n      \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\n    },\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16-467a-4ac4-ba32-eb518646aa1d\",\n      \"OrgnlEndToEndId\": \"5cb8a2db-5c32-41bb-ac27-2597125d50fd\",\n      \"TxSts\": \"ACSC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3.2 - missing fields (FIToFIPmtSts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts should not be missing\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts is required\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3.3 - missing fields (FIToFIPmtSts.GrpHdr)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts.GrpHdr should not be missing\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr is required\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\",\n  \"FIToFIPmtSts\": {\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16-467a-4ac4-ba32-eb518646aa1d\",\n      \"OrgnlEndToEndId\": \"5cb8a2db-5c32-41bb-ac27-2597125d50fd\",\n      \"TxSts\": \"ACSC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3.4 - missing fields (FIToFIPmtSts.GrpHdr.MsgID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts.GrpHdr.MsgId should not be missing\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr.MsgId is required\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlInstrId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlEndToEndId has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\",\n  \"FIToFIPmtSts\": {\n    \"GrpHdr\": {\n      \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\n    },\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16-467a-4ac4-ba32-eb518646aa1d\",\n      \"OrgnlEndToEndId\": \"5cb8a2db-5c32-41bb-ac27-2597125d50fd\",\n      \"TxSts\": \"ACSC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.1 - field boundaries (FIToFIPmtSts.GrpHdr.MsgID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts.GrpHdr.MsgId should not overflow\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr.MsgId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlInstrId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlEndToEndId has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\",\n  \"FIToFIPmtSts\": {\n    \"GrpHdr\": {\n      \"MsgId\": \"ec3a6a10-0c31-4564-94f6-ed1d79fed91fg\",\n      \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\n    },\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16-467a-4ac4-ba32-eb518646aa1d\",\n      \"OrgnlEndToEndId\": \"5cb8a2db-5c32-41bb-ac27-2597125d50fd\",\n      \"TxSts\": \"ACSC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.2 - field boundaries (FIToFIPmtSts.TxInfAndSts.OrgnlInstrId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts.TxInfAndSts.OrgnlInstrId should not overflow\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr.MsgId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlInstrId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlEndToEndId has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\",\n  \"FIToFIPmtSts\": {\n    \"GrpHdr\": {\n      \"MsgId\": \"ec3a6a10-0c31-4564-94f6-ed1d79fed91f\",\n      \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\n    },\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16-467a-4ac4-ba32-eb518646aa1ds\",\n      \"OrgnlEndToEndId\": \"5cb8a2db-5c32-41bb-ac27-2597125d50fd\",\n      \"TxSts\": \"ACSC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.3 - field boundaries (FIToFIPmtSts.TxInfAndSts.OrgnlEndToEndId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts.TxInfAndSts.OrgnlEndToEndId should not overflow\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr.MsgId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlInstrId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlEndToEndId has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\",\n  \"FIToFIPmtSts\": {\n    \"GrpHdr\": {\n      \"MsgId\": \"ec3a6a10-0c31-4564-94f6-ed1d79fed91f\",\n      \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\n    },\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16-467a-4ac4-ba32-eb518646aa1d\",\n      \"OrgnlEndToEndId\": \"5cb8a2db-5c32-41bb-ac27-2597125d50fds\",\n      \"TxSts\": \"ACSC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4.4 - field boundaries (FIToFIPmtSts.TxInfAndSts.ChrgsInf.Agt.FinInstnId.ClrSysMmbId.MmbId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"FIToFIPmtSts.TxInfAndSts.ChrgsInf.Agt.FinInstnId.ClrSysMmbId.MmbId should not overflow\", function () {",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFIPmtSts.GrpHdr.MsgId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlInstrId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.OrgnlEndToEndId has longer length than allowed\\ndata.FIToFIPmtSts.TxInfAndSts.ChrgsInf.0.Agt.FinInstnId.ClrSysMmbId.MmbId has longer length than allowed\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\",\n  \"FIToFIPmtSts\": {\n    \"GrpHdr\": {\n      \"MsgId\": \"ec3a6a10-0c31-4564-94f6-ed1d79fed91f\",\n      \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\n    },\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16-467a-4ac4-ba32-eb518646aa1d\",\n      \"OrgnlEndToEndId\": \"5cb8a2db-5c32-41bb-ac27-2597125d50fd\",\n      \"TxSts\": \"ACSC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001jbsjbxbwswdiwhdsiwhidoeiwihifnrowfvnwoducnhuwfowuwnbuo\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer-response",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer-response"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pacs008",
			"item": [
				{
					"name": "Scenario 1 - Valid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Data sent to data preperation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var jsonReq = JSON.parse(pm.request.body);\r",
									"    pm.expect(jsonData.data).to.eql(jsonReq);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"8cc4f6ffb4fd4e31b42aec0ed5d600a0123\",\r\n            \"CreDtTm\": \"2021-12-03T15:24:25.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"5ab4fc7355de4ef8a75b78b00a681ed2879\",\r\n                \"EndToEndId\": \"2c516801007642dfb892944dde1cf845789\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 31020.89,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 31020.89,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 307.14,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"April Blake Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1968-02-01\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27730975224\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-730975224\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"April Blake Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1968-02-01\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27730975224\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-730975224\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27730975224\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"April Grant\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Felicia Easton Quill\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1935-05-08\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27707650428\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-707650428\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27707650428\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Felicia Quill\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 30713.75 from April to Felicia\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-30T10:38:56.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 2 - Blank Fields (MsgId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"MsgID should not be blank\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.GrpHdr.MsgId has less length than allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 2 - Blank Fields (FIToFIPmtSts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFIPmtSts should not be blank\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"TxTp\": \"pacs.008.001.10\",\r\n  \"FIToFIPmtSts\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 2 - Blank Fields (FIToFIPmtSts.GrpHdr)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFIPmtSts.GrpHdr should not be blank\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.GrpHdr.MsgId is required\\ndata.FIToFICstmrCdt.GrpHdr.CreDtTm is required\\ndata.FIToFICstmrCdt.GrpHdr.NbOfTxs is required\\ndata.FIToFICstmrCdt.GrpHdr.SttlmInf is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {},\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 2 - Blank Fields (TxTp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"data.TxTp should not be blank\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.TxTp must be an enum value\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 2 - Blank Fields (NbOfTxs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFIPmtSts.GrpHdr.NbOfTxs should not be blank\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.GrpHdr.CreDtTm must be date-time format\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 2 - Blank Fields (CdtTrfTxInf.ChrgBr)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"CdtTrfTxInf.ChrgBr should not be blank\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.ChrgBr has less length than allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 3 - Missing fields (TxTp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"data.TxTp should not be missing\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.TxTp is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 3 - Missing fields (InitgPty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"data.CdtTrfTxInf.InitgPty should not be missing\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.InitgPty.Nm is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.InitgPty.Id is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.InitgPty.CtctDtls is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {},\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 3 - Missing fields (CdtTrfTxInf)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"data.FIToFICstmrCdt.CdtTrfTxInf should not be missing\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.PmtId is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.IntrBkSttlmAmt is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.InstdAmt is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.ChrgBr is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.ChrgsInf is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.InitgPty is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.Dbtr is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.DbtrAcct is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.DbtrAgt is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.CdtrAgt is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.Cdtr is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.CdtrAcct is required\\ndata.FIToFICstmrCdt.CdtTrfTxInf.Purp is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {},\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 3 - Missing fields (RgltryRptg)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"data.FIToFICstmrCdt.RgltryRptg should not be missing\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.RgltryRptg.Dtls is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {},\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 3 - Missing fields (SplmtryData)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"data.FIToFICstmrCdt.SplmtryData should not be missing\", function () {\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.SplmtryData.Envlp is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 4 - Boundary Values (MsgId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFICstmrCdt.GrpHdr.MsgId has less length than allowed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.GrpHdr.MsgId has less length than allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 4 - Boundary Values (SttlmMtd)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFICstmrCdt.GrpHdr.SttlmMtd has less length than allowed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.GrpHdr.SttlmInf.SttlmMtd has less length than allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CL\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 4 - Boundary Values (InstrId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFICstmrCdt.CdtTrfTxInf.PmtId.InstrId has less length than allowed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.PmtId.InstrId has less length than allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 4 - Boundary Values (EndToEndId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFICstmrCdt.CdtTrfTxInf.PmtId.EndToEndId has longer length than allowed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.PmtId.EndToEndId has longer length than allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec5ee48-4575-b6a9-ead2955b80695555555555\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 4 - Boundary Values (ChrgBr)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFICstmrCdt.CdtTrfTxInf.ChrgBr has less length than allowed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.ChrgBr has less length than allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DE\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 4 - Boundary Values (Ccy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFICstmrCdt.CdtTrfTxInf.InstdAmt.Amt.Ccy has less length than allowed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.IntrBkSttlmAmt.Amt.Ccy must be an enum value\\ndata.FIToFICstmrCdt.CdtTrfTxInf.InstdAmt.Amt.Ccy must be an enum value\\ndata.FIToFICstmrCdt.CdtTrfTxInf.ChrgsInf.Amt.Ccy must be an enum value\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"D\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"US\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"US\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 4 - Boundary Values (CtryOfBirth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFICstmrCdt.CdtTrfTxInf.Dbtr.Id.PrvtId.DtAndPlcOfBirth.CtryOfBirth has less length than allowed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.Dbtr.Id.PrvtId.DtAndPlcOfBirth.CtryOfBirth pattern mismatch\\ndata.FIToFICstmrCdt.CdtTrfTxInf.Dbtr.Id.PrvtId.DtAndPlcOfBirth.CtryOfBirth has less length than allowed\\ndata.FIToFICstmrCdt.CdtTrfTxInf.Cdtr.Id.PrvtId.DtAndPlcOfBirth.CtryOfBirth pattern mismatch\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 95715423688371100,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 947677462261100,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"Z\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"Z\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario 5 - Negative Amounts (Amt)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"FIToFICstmrCdt.CdtTrfTxInf.IntrBkSttlmAmt.Amt.Amt is less than minimum\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(\"SWAGGER_REQUEST_VALIDATION_FAILED\");\r",
									"    pm.expect(jsonData.errors[0].error).to.equal(\"data.FIToFICstmrCdt.CdtTrfTxInf.IntrBkSttlmAmt.Amt.Amt is less than minimum\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"TxTp\": \"pacs.008.001.10\",\r\n    \"FIToFICstmrCdt\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n            \"CreDtTm\": \"2021-11-18T16:47:23.000Z\",\r\n            \"NbOfTxs\": 1,\r\n            \"SttlmInf\": {\r\n                \"SttlmMtd\": \"CLRG\"\r\n            }\r\n        },\r\n        \"CdtTrfTxInf\": {\r\n            \"PmtId\": {\r\n                \"InstrId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\",\r\n                \"EndToEndId\": \"b51ec534ee48-4575-b6a9-ead2955b8069\"\r\n            },\r\n            \"IntrBkSttlmAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": -50,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"InstdAmt\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 25,\r\n                    \"Ccy\": \"USD\"\r\n                }\r\n            },\r\n            \"ChrgBr\": \"DEBT\",\r\n            \"ChrgsInf\": {\r\n                \"Amt\": {\r\n                    \"Amt\": 56,\r\n                    \"Ccy\": \"USD\"\r\n                },\r\n                \"Agt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"InitgPty\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"Dbtr\": {\r\n                \"Nm\": \"Bruce Drew Summers\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1942-01-24\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27757347775\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-757347775\"\r\n                }\r\n            },\r\n            \"DbtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27757347775\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Bruce Summers\"\r\n            },\r\n            \"DbtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"CdtrAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            },\r\n            \"Cdtr\": {\r\n                \"Nm\": \"Geoffrey Piper Grant\",\r\n                \"Id\": {\r\n                    \"PrvtId\": {\r\n                        \"DtAndPlcOfBirth\": {\r\n                            \"BirthDt\": \"1926-09-18\",\r\n                            \"CityOfBirth\": \"Unknown\",\r\n                            \"CtryOfBirth\": \"ZZ\"\r\n                        },\r\n                        \"Othr\": {\r\n                            \"Id\": \"+27880358989\",\r\n                            \"SchmeNm\": {\r\n                                \"Prtry\": \"MSISDN\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"CtctDtls\": {\r\n                    \"MobNb\": \"+27-880358989\"\r\n                }\r\n            },\r\n            \"CdtrAcct\": {\r\n                \"Id\": {\r\n                    \"Othr\": {\r\n                        \"Id\": \"+27880358989\",\r\n                        \"SchmeNm\": {\r\n                            \"Prtry\": \"MSISDN\"\r\n                        }\r\n                    }\r\n                },\r\n                \"Nm\": \"Geoffrey Grant\"\r\n            },\r\n            \"Purp\": {\r\n                \"Cd\": \"MP2P\"\r\n            }\r\n        },\r\n        \"RgltryRptg\": {\r\n            \"Dtls\": {\r\n                \"Tp\": \"BALANCE OF PAYMENTS\",\r\n                \"Cd\": \"100\"\r\n            }\r\n        },\r\n        \"RmtInf\": {\r\n            \"Ustrd\": \"Payment of USD 94767746226110000.62 from Bruce to Geoffrey\"\r\n        },\r\n        \"SplmtryData\": {\r\n            \"Envlp\": {\r\n                \"Doc\": {\r\n                    \"Xprtn\": \"2021-11-18T16:52:19.000Z\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}/function/off-transaction-monitoring-service-rel-1-0-0/transfer",
							"host": [
								"{{ofUrl}}"
							],
							"path": [
								"function",
								"off-transaction-monitoring-service-rel-1-0-0",
								"transfer"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "CreDtTm",
			"value": ""
		},
		{
			"key": "{{CreDtTm}}",
			"value": ""
		},
		{
			"key": "jsondata",
			"value": ""
		},
		{
			"key": "EndToEndId",
			"value": ""
		}
	]
}