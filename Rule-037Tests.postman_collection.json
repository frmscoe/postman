{
	"info": {
		"_postman_id": "aee365d7-1cf4-47d5-b29d-1d31635b10bb",
		"name": "Rule-037Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "e2e pacs 002",
			"item": [
				{
					"name": "transaction 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"var req = JSON.parse(request.data);",
									"const arangourl = pm.environment.get(\"arangoUrl\");",
									"",
									"const transactions = [\"fa02add89782485aaa029fefbb79e51b\"]",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should not have errors\", function () {",
									"    pm.expect(jsonData).not.to.have.property('errors')",
									"});",
									"",
									"pm.test(\"should be a valid transaction\", function () {",
									"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
									"});",
									"",
									"pm.test(\"should send to data preparation successfully\", function () {",
									"    pm.expect(jsonData.sent).to.eql(true);",
									"});",
									"",
									"pm.test(\"should have the same outgoing and incoming json\", function () {",
									"    pm.expect(jsonData.data).to.eql(req);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"pm.collectionVariables.set(\"transactionID\", myUUID.slice(-32));\r",
									"const arangourl = pm.environment.get(\"arangoUrl\");\r",
									"const baseUrl = pm.environment.get(\"ofUrl\");\r",
									"const version = pm.environment.get(\"version\");\r",
									"const now = new Date().getTime();\r",
									"\r",
									"const msgId = pm.collectionVariables.get(\"transactionID\");\r",
									"\r",
									"const ruleConfig = [{\r",
									"    \"id\": \"037@1.0.0\",\r",
									"    \"cfg\": \"1.0.0\",\r",
									"    \"config\": {\r",
									"        \"bands\": [\r",
									"            {\r",
									"                \"subRuleRef\": \".00\",\r",
									"                \"outcome\": false,\r",
									"                \"reason\": \"Creditor is not watch-listed\"\r",
									"            },\r",
									"            {\r",
									"                \"subRuleRef\": \".01\",\r",
									"                \"outcome\": true,\r",
									"                \"reason\": \"Creditor is watch-listed\"\r",
									"            }\r",
									"        ]\r",
									"    }\r",
									"}]\r",
									"\r",
									"let e2eID = JSON.stringify(msgId);\r",
									"e2eID = e2eID.replace(\"\\\"\", \"'\")\r",
									"e2eID = e2eID.replace(\"\\\"\", \"'\")\r",
									"pm.collectionVariables.set(\"EndToEndId\", e2eID);\r",
									"\r",
									"const networkMaps = [\r",
									"    {\r",
									"        \"key\": \"037\",\r",
									"        \"active\": true,\r",
									"        \"cfg\": \"1.0.0\",\r",
									"        \"messages\": [\r",
									"            {\r",
									"                \"id\": \"004_037@1.0.0\",\r",
									"                \"host\": `${baseUrl}function/off-transaction-aggregation-decisioning-processor-rel-1-0-0`,\r",
									"                \"cfg\": \"1.0.0\",\r",
									"                \"txTp\": \"pacs.002.001.12\",\r",
									"                \"channels\": [\r",
									"                    {\r",
									"                        \"id\": \"001@1.0.0\",\r",
									"                        \"host\": `${baseUrl}function/off-channel-aggregation-decisioning-processor-rel-1-0-0`,\r",
									"                        \"cfg\": \"1.0.0\",\r",
									"                        \"typologies\": [\r",
									"                            {\r",
									"                                \"id\": \"999_037@1.0.0\",\r",
									"                                \"host\": `${baseUrl}function/off-typology-processor-rel-1-0-0`,\r",
									"                                \"cfg\": \"1.0.0\",\r",
									"                                \"rules\": [\r",
									"                                    {\r",
									"                                        \"id\": \"037@1.0.0\",\r",
									"                                        \"host\": `${baseUrl}function/off-rule-037${version}`,\r",
									"                                        \"cfg\": \"1.0.0\"\r",
									"                                    }\r",
									"                                ]\r",
									"                            }\r",
									"                        ]\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        ]\r",
									"    }]\r",
									"\r",
									"const tpExpressions = [\r",
									"    {\r",
									"        \"id\": \"999_037@1.0.0\",\r",
									"        \"cfg\": \"1.0.0\",\r",
									"        \"rules\": [\r",
									"            {\r",
									"                \"id\": \"037@1.0.0\",\r",
									"                \"cfg\": \"1.0.0\",\r",
									"                \"ref\": \".00\",\r",
									"                \"true\": 100,\r",
									"                \"false\": 0\r",
									"            },\r",
									"            {\r",
									"                \"id\": \"037@1.0.0\",\r",
									"                \"cfg\": \"1.0.0\",\r",
									"                \"ref\": \".01\",\r",
									"                \"true\": 100,\r",
									"                \"false\": 0\r",
									"            }\r",
									"        ],\r",
									"        \"expression\": {\r",
									"            \"operator\": \"+\",\r",
									"            \"terms\": [\r",
									"                {\r",
									"                    \"id\": \"037@1.0.0\",\r",
									"                    \"cfg\": \"1.0.0\"\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"]\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${arangourl}_db/networkmap/_api/cursor?waitForSync=true`,\r",
									"    method: 'POST',\r",
									"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            query: `FOR doc IN networkConfiguration\r",
									"                    FILTER doc.active == true\r",
									"                    UPDATE doc WITH { active: false } IN networkConfiguration`\r",
									"        })\r",
									"    }\r",
									"}, () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${arangourl}_db/networkmap/_api/cursor?waitForSync=true`,\r",
									"        method: 'POST',\r",
									"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                query: `FOR networkmap IN ${JSON.stringify(networkMaps)}\r",
									"                    INSERT {_id: networkmap._id, _key: networkmap.key, active: networkmap.active, cfg: networkmap.cfg, messages: networkmap.messages} INTO networkConfiguration\r",
									"                    OPTIONS { overwrite: true }`\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${arangourl}_db/Configuration/_api/cursor?waitForSync=true`,\r",
									"    method: 'POST',\r",
									"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            query: `FOR config IN ${JSON.stringify(ruleConfig)}\r",
									"                    INSERT {_key: \"037\", id: config.id, cfg: config.cfg, config: config.config} INTO configuration\r",
									"                    OPTIONS { overwrite: true }`\r",
									"        })\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${arangourl}_db/Configuration/_api/cursor?waitForSync=true`,\r",
									"    method: 'POST',\r",
									"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: {\r",
									"            query: `FOR expression IN ${JSON.stringify(tpExpressions)}\r",
									"                    INSERT {_key: \"9990371\", id: expression.id, cfg: expression.cfg, rules: expression.rules, expression: expression.expression } INTO typologyExpression\r",
									"                    OPTIONS { overwrite: true }`\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"TxTp\": \"pacs.002.001.12\",\n  \"FIToFIPmtSts\": {\n    \"GrpHdr\": {\n      \"MsgId\": \"{{transactionID}}\",\n      \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\n    },\n    \"TxInfAndSts\": {\n      \"OrgnlInstrId\": \"2f68ae16467a4ac4ba32eb5\",\n      \"OrgnlEndToEndId\": \"81a5cc76-541c-4d8b-ae29\",\n      \"TxSts\": \"ACCC\",\n      \"ChrgsInf\": [\n        {\n          \"Amt\": {\n            \"Amt\": 157605510200862,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp001\"\n              }\n            }\n          }\n        },\n        {\n          \"Amt\": {\n            \"Amt\": 15918156530287100,\n            \"Ccy\": \"USD\"\n          },\n          \"Agt\": {\n            \"FinInstnId\": {\n              \"ClrSysMmbId\": {\n                \"MmbId\": \"dfsp002\"\n              }\n            }\n          }\n        }\n      ],\n      \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\n      \"InstgAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp001\"\n          }\n        }\n      },\n      \"InstdAgt\": {\n        \"FinInstnId\": {\n          \"ClrSysMmbId\": {\n            \"MmbId\": \"dfsp002\"\n          }\n        }\n      }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}function/off-transaction-monitoring-service{{TMSversion}}/transfer-response",
							"host": [
								"{{ofUrl}}function"
							],
							"path": [
								"off-transaction-monitoring-service{{TMSversion}}",
								"transfer-response"
							]
						}
					},
					"response": []
				},
				{
					"name": "Arango db check transaction 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(checkStatusCode, 5000);\r",
									"\r",
									"function checkStatusCode() {\r",
									"\r",
									"    pm.sendRequest('https://postman-echo.com/get', function (err, res) {\r",
									"\r",
									"        tests['status code should be 200'] = res.code === 200;\r",
									"\r",
									"    });\r",
									"}\r",
									"\r",
									"var Header = require('postman-collection').Header;\r",
									"pm.request.headers.append(Header.create(`Bearer ${pm.globals.get(\"arangoToken\")}`, 'Authorization'));\r",
									"console.log(\"received end to end id for above request \", pm.collectionVariables.get(\"EndToEndId\"));\r",
									"\r",
									"pm.environment.set(\"query\", JSON.stringify(\r",
									"    `\r",
									"      for transaction In transactions\r",
									"       FILTER transaction.transaction.FIToFIPmtSts.GrpHdr.MsgId == \r",
									"       `+ pm.collectionVariables.get(\"EndToEndId\") + `\r",
									"       return transaction `\r",
									"));\r",
									"\r",
									"console.log(pm.environment.get(\"query\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var req = JSON.parse(request.data);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"check that there is actual data received back \", function () {\r",
									"    pm.expect(jsonData.result).to.not.eql([]);\r",
									"    pm.expect(jsonData.result[0].networkMap.cfg).to.eql('1.0.0');\r",
									"});\r",
									"\r",
									"pm.test(\"check that the report status is NALT \", function () {\r",
									"    pm.expect(jsonData.result[0].report.status).to.eql(\"NALT\")\r",
									"    pm.expect(jsonData.result[0].report.tadpResult.channelResult[0].typologyResult[0].ruleResults[0].result).to.eql(false);\r",
									"    pm.expect(jsonData.result[0].report.tadpResult.channelResult[0].typologyResult[0].ruleResults[0].subRuleRef).to.eql(\".00\");\r",
									"    pm.expect(jsonData.result[0].report.tadpResult.channelResult[0].typologyResult[0].ruleResults[0].reason).to.eql(\"Creditor is not watch-listed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"for transaction In transactions FILTER transaction.transaction.FIToFIPmtSts.GrpHdr.MsgId ==  {{EndToEndId}} return transaction \"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{arangoUrl}}_db/transactionHistory/_api/cursor",
							"host": [
								"{{arangoUrl}}_db"
							],
							"path": [
								"transactionHistory",
								"_api",
								"cursor"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AM-1020: Creditor not found in watch-list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Test to check debtor with no watchlist record\r",
							"\r",
							"const now = new Date().getTime();\r",
							"pm.globals.set(\"now\", new Date().toISOString());\r",
							"\r",
							"const arangourl = pm.environment.get(\"arangoUrl\")\r",
							"\r",
							"const ruleConfig = [{\r",
							"    \"id\": \"037@1.0.0\",\r",
							"    \"cfg\": \"1.0.0\",\r",
							"    \"config\": {\r",
							"        \"bands\": [\r",
							"            {\r",
							"                \"subRuleRef\": \".00\",\r",
							"                \"outcome\": false,\r",
							"                \"reason\": \"Creditor is not watch-listed\"\r",
							"            },\r",
							"            {\r",
							"                \"subRuleRef\": \".01\",\r",
							"                \"outcome\": true,\r",
							"                \"reason\": \"Creditor is watch-listed\"\r",
							"            }\r",
							"        ]\r",
							"    }\r",
							"}]\r",
							"  \r",
							"const transactionGraph = [\r",
							"  {\r",
							"    \"_key\": \"8kfnbee-2475-4865-88d6-44cc75abs397\",\r",
							"    \"_from\": \"accounts/b9gf90b1690ec225f41cbfa8f1f7b859e70c30e6275a9302c3c19929b93a1b83\",\r",
							"    \"_to\": \"accounts/394nnxc4f6002ca1634fde3daa2ace7ac93912193c2021453bb6or43\",\r",
							"    \"TxTp\": \"pacs.002.001.12\",\r",
							"    \"TxSts\": \"ACCC\",\r",
							"    \"CreDtTm\":  new Date(now - 10000).toISOString(),\r",
							"    \"PmtInfId\": \"5ab4fc7355de4ef8a75b78b00a681ed2232\",\r",
							"    \"EndToEndId\": \"p5xc534ee48-4575-b6a9-ead2955e92j\"\r",
							"  }\r",
							"]\r",
							"\r",
							"const accountHolder = [\r",
							"    {\r",
							"      _from: 'entities/5blw315a-2d31-46bb-b307-0e0c4240zo4i',\r",
							"      _to: 'accounts/b9gf90b1690ec225f41cbfa8f1f7b859e70c30e6275a9302c3c19929b93a1b83',\r",
							"      CreDtTm:  new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const entities = [\r",
							"    {\r",
							"      _key: '5blw315a-2d31-46bb-b307-0e0c4240zo4i',\r",
							"      _id: 'entities/5blw315a-2d31-46bb-b307-0e0c4240zo4i',\r",
							"      _rev: '_d92RNb---_',\r",
							"      Id: '5blw315a-2d31-46bb-b307-0e0c4240zo4i',\r",
							"      CreDtTm:  new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"// Create \"watchlist\" collection in transactionHistory database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/transactionHistory/_api/collection`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({ \r",
							"            \"name\" : \"watchlist\" \r",
							"        })\r",
							"    }\r",
							"},()=>{\r",
							"    // Create an index for watch-list collection\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/transactionHistory/_api/index?collection=watchlist`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({ \r",
							"                \"type\" : \"persistent\", \r",
							"                \"unique\" : true,\r",
							"                \"name\": \"idx_partyid\",\r",
							"                \"fields\" : [ \r",
							"                    \"party_id\" \r",
							"                ] \r",
							"            })\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// Seed transactions to Graph Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR transaction IN ${JSON.stringify(transactionGraph)}\r",
							"                    INSERT transaction INTO transactionRelationship\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"// Seed accountHolder to Graph Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR holder IN ${JSON.stringify(accountHolder)}\r",
							"                    INSERT holder INTO account_holder\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"// Seed entity to Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR entity IN ${JSON.stringify(entities)}\r",
							"                    INSERT entity INTO entities\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"// Seed rule config to Configuration collection\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/Configuration/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR config IN ${JSON.stringify(ruleConfig)}\r",
							"                    INSERT {_key: \"037\", id: config.id, cfg: config.cfg, config: config.config} INTO configuration\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check debtor with no watchlist record\r",
							"const arangourl = pm.environment.get(\"arangoUrl\")\r",
							"const jsonData = pm.response.json();\r",
							"const req = JSON.parse(request.data);\r",
							"\r",
							"const graphTransactions = [ \"8kfnbee-2475-4865-88d6-44cc75abs397\" ]\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"should have rule result of false\", function () {\r",
							"    pm.expect(jsonData.ruleResult.result).to.be.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"should have rule reason of 'Creditor is not watch-listed'\", function () {\r",
							"    pm.expect(jsonData.ruleResult.reason).to.be.eql(\"Creditor is not watch-listed\");\r",
							"});\r",
							"\r",
							"pm.test(\"should have subRuleRef reason of '.00'\", function () {\r",
							"    pm.expect(jsonData.ruleResult.subRuleRef).to.be.eql(\".00\");\r",
							"});\r",
							"\r",
							"pm.test(\"Remove Seed Data from transactionGraph\", function () {\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR transaction IN ${JSON.stringify(graphTransactions)}\r",
							"                        REMOVE { _key: transaction } IN transactionRelationship\r",
							"                        OPTIONS { ignoreErrors: true }`\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"transaction\": {\r\n        \"TxTp\": \"pacs.002.001.12\",\r\n        \"FIToFIPmtSts\": {\r\n            \"GrpHdr\": {\r\n                \"MsgId\": \"{{$guid}}\",\r\n                \"CreDtTm\": \"{{now}}\"\r\n            },\r\n            \"TxInfAndSts\": {\r\n                \"OrgnlInstrId\": \"5ab4fc7355de4ef8a75b78b00a681ed2232\",\r\n                \"OrgnlEndToEndId\": \"p5xc534ee48-4575-b6a9-ead2955e92j\",\r\n                \"TxSts\": \"ACCC\",\r\n                \"ChrgsInf\": [\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 307.14,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp001\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 153.57,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp001\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 30.71,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp002\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                \"AccptncDtTm\": \"2021-12-03T15:24:26.000Z\",\r\n                \"InstgAgt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                },\r\n                \"InstdAgt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp002\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"networkMap\": {\r\n        \"messages\": [\r\n            {\r\n                \"id\": \"004_037@1.0.0\",\r\n                \"host\": \"{{ofUrl}}function/off-transaction-aggregation-decisioning-processor-rel-1-0-0\",\r\n                \"cfg\": \"1.0.0\",\r\n                \"txTp\": \"pacs.002.001.12\",\r\n                \"channels\": [\r\n                    {\r\n                        \"id\": \"001@1.0.0\",\r\n                        \"host\": \"{{ofUrl}}function/off-channel-aggregation-decisioning-processor-rel-1-0-0\",\r\n                        \"cfg\": \"1.0.0\",\r\n                        \"typologies\": [\r\n                            {\r\n                                \"id\": \"999_037@1.0.0\",\r\n                                \"host\": \"{{ofUrl}}function/off-typology-processor-rel-1-0-0\",\r\n                                \"cfg\": \"1.0.0\",\r\n                                \"rules\": [\r\n                                    {\r\n                                        \"id\": \"037@1.0.0\",\r\n                                        \"host\": \"{{ofUrl}}function/off-rule-037-rel-1-0-0\",\r\n                                        \"cfg\": \"1.0.0\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ofUrl}}function/off-rule-037{{version}}/execute",
					"host": [
						"{{ofUrl}}function"
					],
					"path": [
						"off-rule-037{{version}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "AM-1020: Creditor found in watch-list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Test to check debtor with no watchlist record\r",
							"\r",
							"const now = new Date().getTime();\r",
							"pm.globals.set(\"now\", new Date().toISOString());\r",
							"\r",
							"const arangourl = pm.environment.get(\"arangoUrl\")\r",
							"\r",
							"const ruleConfig = [{\r",
							"    \"id\": \"037@1.0.0\",\r",
							"    \"cfg\": \"1.0.0\",\r",
							"    \"config\": {\r",
							"        \"bands\": [\r",
							"            {\r",
							"                \"subRuleRef\": \".00\",\r",
							"                \"outcome\": false,\r",
							"                \"reason\": \"Creditor is not watch-listed\"\r",
							"            },\r",
							"            {\r",
							"                \"subRuleRef\": \".01\",\r",
							"                \"outcome\": true,\r",
							"                \"reason\": \"Creditor is watch-listed\"\r",
							"            }\r",
							"        ]\r",
							"    }\r",
							"}]\r",
							"\r",
							"const transactionGraph = [\r",
							"    {\r",
							"        \"_key\": \"5jdbee-2475-4865-88d6-fn393baf520\",\r",
							"        \"_from\": \"accounts/310jfrtkrs25f41cbfa8f1f7b859e70c30e6275a9302c3c19929b93a1a72\",\r",
							"        \"_to\": \"accounts/42ijbdkw424yt4ae3c67057d0e1d2e0b821480ae35954cd6772ec4d9f30a71204\",\r",
							"        \"TxTp\": \"pacs.002.001.12\",\r",
							"        \"TxSts\": \"ACCC\",\r",
							"        \"CreDtTm\": new Date(now - 10000).toISOString(),\r",
							"        \"PmtInfId\": \"5ab4fc7355de4ef8a75b78b00a681ed2232\",\r",
							"        \"EndToEndId\": \"5ierndns-4575-b6a9-ead2955b923\"\r",
							"    }\r",
							"]\r",
							"\r",
							"const accountHolder = [\r",
							"    {\r",
							"        _from: 'entities/jsj3ja-2d31-46bb-b307-0e0c4240d7g3',\r",
							"        _to: 'accounts/310jfrtkrs25f41cbfa8f1f7b859e70c30e6275a9302c3c19929b93a1a72',\r",
							"        CreDtTm: new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const entities = [\r",
							"    {\r",
							"        _key: 'jsj3ja-2d31-46bb-b307-0e0c4240d7g3',\r",
							"        _id: 'entities/jsj3ja-2d31-46bb-b307-0e0c4240d7g3',\r",
							"        Id: 'jsj3ja-2d31-46bb-b307-0e0c4240d7g3',\r",
							"        CreDtTm: new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const watchlist = [\r",
							"    {\r",
							"        \"party_id\": 'jsj3ja-2d31-46bb-b307-0e0c4240d7g3',\r",
							"        \"status\": \"ACTIVE\",\r",
							"        \"time-stamp\": new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"// Seed transactions to Graph Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR transaction IN ${JSON.stringify(transactionGraph)}\r",
							"                    INSERT transaction INTO transactionRelationship\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"//Seed entity to Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR entity IN ${JSON.stringify(entities)}\r",
							"                    INSERT entity INTO entities\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"}, () => {\r",
							"    // Seed accountHolder to Graph Database\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR holder IN ${JSON.stringify(accountHolder)}\r",
							"                        INSERT holder INTO account_holder\r",
							"                        OPTIONS { overwrite: true }`\r",
							"            })\r",
							"        }\r",
							"    }, () => {\r",
							"        // Seed watchlist to Database\r",
							"        pm.sendRequest({\r",
							"            url: `${arangourl}_db/transactionHistory/_api/cursor?waitForSync=true`,\r",
							"            method: 'POST',\r",
							"            header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    query: `FOR obj IN ${JSON.stringify(watchlist)}\r",
							"                    INSERT { _key: \"9990372\", party_id: obj.party_id, status: obj.status, \"time-stamp\": obj[\"time-stamp\"] } INTO watchlist\r",
							"                    OPTIONS { overwrite: true }`\r",
							"                })\r",
							"            }\r",
							"        });\r",
							"    })\r",
							"});\r",
							"\r",
							"// Seed rule config to Configuration collection\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/Configuration/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR config IN ${JSON.stringify(ruleConfig)}\r",
							"                    INSERT {_key: \"037\", id: config.id, cfg: config.cfg, config: config.config} INTO configuration\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check debtor with no watchlist record\r",
							"const arangourl = pm.environment.get(\"arangoUrl\")\r",
							"const jsonData = pm.response.json();\r",
							"const req = JSON.parse(request.data);\r",
							"\r",
							"const watchlist = [\"9990372\"]\r",
							"\r",
							"const graphTransactions = [\"5jdbee-2475-4865-88d6-fn393baf520\"]\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"should have rule result of true\", function () {\r",
							"    pm.expect(jsonData.ruleResult.result).to.be.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"should have rule reason of 'Creditor is watch-listed'\", function () {\r",
							"    pm.expect(jsonData.ruleResult.reason).to.be.eql(\"Creditor is watch-listed\");\r",
							"});\r",
							"\r",
							"pm.test(\"should have subRuleRef reason of '.01'\", function () {\r",
							"    pm.expect(jsonData.ruleResult.subRuleRef).to.be.eql(\".01\");\r",
							"});\r",
							"\r",
							"pm.test(\"Remove Seed Data from transactionGraph\", function () {\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR transaction IN ${JSON.stringify(graphTransactions)}\r",
							"                        REMOVE { _key: transaction } IN transactionRelationship\r",
							"                        OPTIONS { ignoreErrors: true }`\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"});\r",
							"\r",
							"pm.test(\"Remove Seed entry from watchlist\", function () {\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/transactionHistory/_api/cursor`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR obj IN ${JSON.stringify(watchlist)}\r",
							"                    REMOVE { _key: obj } IN watchlist\r",
							"                    OPTIONS { ignoreErrors: true }`\r",
							"            })\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"transaction\": {\r\n        \"TxTp\": \"pacs.002.001.12\",\r\n        \"FIToFIPmtSts\": {\r\n            \"GrpHdr\": {\r\n                \"MsgId\": \"{{$guid}}\",\r\n                \"CreDtTm\": \"{{now}}\"\r\n            },\r\n            \"TxInfAndSts\": {\r\n                \"OrgnlInstrId\": \"5ab4fc7355de4ef8a75b78b00a681ed2255\",\r\n                \"OrgnlEndToEndId\": \"5ierndns-4575-b6a9-ead2955b923\",\r\n                \"TxSts\": \"ACCC\",\r\n                \"ChrgsInf\": [\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 307.14,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp001\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 153.57,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp001\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 30.71,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp002\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                \"AccptncDtTm\": \"2021-12-03T15:24:26.000Z\",\r\n                \"InstgAgt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                },\r\n                \"InstdAgt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp002\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"networkMap\": {\r\n        \"messages\": [\r\n            {\r\n                \"id\": \"004_037@1.0.0\",\r\n                \"host\": \"{{ofUrl}}function/off-transaction-aggregation-decisioning-processor-rel-1-0-0\",\r\n                \"cfg\": \"1.0.0\",\r\n                \"txTp\": \"pacs.002.001.12\",\r\n                \"channels\": [\r\n                    {\r\n                        \"id\": \"001@1.0.0\",\r\n                        \"host\": \"{{ofUrl}}function/off-channel-aggregation-decisioning-processor-rel-1-0-0\",\r\n                        \"cfg\": \"1.0.0\",\r\n                        \"typologies\": [\r\n                            {\r\n                                \"id\": \"999_037@1.0.0\",\r\n                                \"host\": \"{{ofUrl}}function/off-typology-processor-rel-1-0-0\",\r\n                                \"cfg\": \"1.0.0\",\r\n                                \"rules\": [\r\n                                    {\r\n                                        \"id\": \"037@1.0.0\",\r\n                                        \"host\": \"{{ofUrl}}function/off-rule-037-rel-1-0-0\",\r\n                                        \"cfg\": \"1.0.0\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ofUrl}}function/off-rule-037{{version}}/execute",
					"host": [
						"{{ofUrl}}function"
					],
					"path": [
						"off-rule-037{{version}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "AM-1020: Creditor found in watch-list, status not 'ACTIVE'",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Test to check debtor with no watchlist record\r",
							"\r",
							"const now = new Date().getTime();\r",
							"pm.globals.set(\"now\", new Date().toISOString());\r",
							"\r",
							"const arangourl = pm.environment.get(\"arangoUrl\")\r",
							"\r",
							"const ruleConfig = [{\r",
							"    \"id\": \"037@1.0.0\",\r",
							"    \"cfg\": \"1.0.0\",\r",
							"    \"config\": {\r",
							"        \"bands\": [\r",
							"            {\r",
							"                \"subRuleRef\": \".00\",\r",
							"                \"outcome\": false,\r",
							"                \"reason\": \"Creditor is not watch-listed\"\r",
							"            },\r",
							"            {\r",
							"                \"subRuleRef\": \".01\",\r",
							"                \"outcome\": true,\r",
							"                \"reason\": \"Creditor is watch-listed\"\r",
							"            }\r",
							"        ]\r",
							"    }\r",
							"}\r",
							"]\r",
							"\r",
							"const transactionGraph = [\r",
							"    {\r",
							"        \"_key\": \"02nw23-2475-4865-88d6-44cc75aaf631\",\r",
							"        \"_from\": \"accounts/vjj24nb90ec225f41cbfa8f1f7b859e70c30e6275a9302c3c19929gj24fjs\",\r",
							"        \"_to\": \"accounts/v2313ejb6315b775ff28cb4c8c1dde4052c94b48739cce206dbjs2nd\",\r",
							"        \"TxTp\": \"pacs.002.001.12\",\r",
							"        \"TxSts\": \"ACCC\",\r",
							"        \"CreDtTm\": new Date(now - 10000).toISOString(),\r",
							"        \"PmtInfId\": \"5ab4fc7355de4ef8a75b78b00a681ed2232\",\r",
							"        \"EndToEndId\": \"31i53nd4ee48-4575-b6a9-ead2955b034\"\r",
							"    }\r",
							"]\r",
							"\r",
							"const accountHolder = [\r",
							"    {\r",
							"        _from: 'entities/2vj3515a-2d31-46bb-b307-0e0cvwj2ej2',\r",
							"        _to: 'accounts/vjj24nb90ec225f41cbfa8f1f7b859e70c30e6275a9302c3c19929gj24fjs',\r",
							"        CreDtTm: new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const entities = [\r",
							"    {\r",
							"        _key: '2vj3515a-2d31-46bb-b307-0e0cvwj2ej2',\r",
							"        _id: 'entities/2vj3515a-2d31-46bb-b307-0e0cvwj2ej2',\r",
							"        Id: '2vj3515a-2d31-46bb-b307-0e0cvwj2ej2',\r",
							"        CreDtTm: new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const watchlist = [\r",
							"    {\r",
							"        \"party_id\": '2vj3515a-2d31-46bb-b307-0e0cvwj2ej2',\r",
							"        \"status\": \"INACTIVE\",\r",
							"        \"time-stamp\": new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"// Seed transactions to Graph Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR transaction IN ${JSON.stringify(transactionGraph)}\r",
							"                    INSERT transaction INTO transactionRelationship\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"// Seed entity to Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR entity IN ${JSON.stringify(entities)}\r",
							"                    INSERT entity INTO entities\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"}, () => {\r",
							"    // Seed accountHolder to Graph Database\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR holder IN ${JSON.stringify(accountHolder)}\r",
							"                        INSERT holder INTO account_holder\r",
							"                        OPTIONS { overwrite: true }`\r",
							"            })\r",
							"        }\r",
							"    }, () => {\r",
							"        // Seed entity to Database\r",
							"        pm.sendRequest({\r",
							"            url: `${arangourl}_db/transactionHistory/_api/cursor?waitForSync=true`,\r",
							"            method: 'POST',\r",
							"            header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    query: `FOR obj IN ${JSON.stringify(watchlist)}\r",
							"                    INSERT { _key: \"9990373\", party_id: obj.party_id, status: obj.status, \"time-stamp\": obj[\"time-stamp\"] } INTO watchlist\r",
							"                    OPTIONS { overwrite: true }`\r",
							"                })\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// Seed rule config to Configuration collection\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/Configuration/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR config IN ${JSON.stringify(ruleConfig)}\r",
							"                    INSERT {_key: \"037\", id: config.id, cfg: config.cfg, config: config.config} INTO configuration\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check debtor with no watchlist record\r",
							"const arangourl = pm.environment.get(\"arangoUrl\")\r",
							"const jsonData = pm.response.json();\r",
							"const req = JSON.parse(request.data);\r",
							"\r",
							"const watchlist = [\"9990373\"]\r",
							"\r",
							"const graphTransactions = [ \"02nw23-2475-4865-88d6-44cc75aaf631\" ]\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"should have rule result of false\", function () {\r",
							"    pm.expect(jsonData.ruleResult.result).to.be.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"should have rule reason of 'Creditor is not watch-listed'\", function () {\r",
							"    pm.expect(jsonData.ruleResult.reason).to.be.eql(\"Creditor is not watch-listed\");\r",
							"});\r",
							"\r",
							"pm.test(\"should have subRuleRef reason of '.00'\", function () {\r",
							"    pm.expect(jsonData.ruleResult.subRuleRef).to.be.eql(\".00\");\r",
							"});\r",
							"\r",
							"pm.test(\"Remove Seed Data from transactionGraph\", function () {\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR transaction IN ${JSON.stringify(graphTransactions)}\r",
							"                        REMOVE { _key: transaction } IN transactionRelationship\r",
							"                        OPTIONS { ignoreErrors: true }`\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"});\r",
							"\r",
							"pm.test(\"Remove Seed entry from watchlist\", function () {\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/transactionHistory/_api/cursor`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR obj IN ${JSON.stringify(watchlist)}\r",
							"                    REMOVE { _key: obj } IN watchlist\r",
							"                    OPTIONS { ignoreErrors: true }`\r",
							"            })\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"transaction\": {\r\n        \"TxTp\": \"pacs.002.001.12\",\r\n        \"FIToFIPmtSts\": {\r\n            \"GrpHdr\": {\r\n                \"MsgId\": \"{{$guid}}\",\r\n                \"CreDtTm\": \"{{now}}\"\r\n            },\r\n            \"TxInfAndSts\": {\r\n                \"OrgnlInstrId\": \"5ab4fc7355de4ef8a75b78b00a681ed2255\",\r\n                \"OrgnlEndToEndId\": \"31i53nd4ee48-4575-b6a9-ead2955b034\",\r\n                \"TxSts\": \"ACCC\",\r\n                \"ChrgsInf\": [\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 307.14,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp001\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 153.57,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp001\"\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Amt\": {\r\n                            \"Amt\": 30.71,\r\n                            \"Ccy\": \"USD\"\r\n                        },\r\n                        \"Agt\": {\r\n                            \"FinInstnId\": {\r\n                                \"ClrSysMmbId\": {\r\n                                    \"MmbId\": \"dfsp002\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                \"AccptncDtTm\": \"2021-12-03T15:24:26.000Z\",\r\n                \"InstgAgt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp001\"\r\n                        }\r\n                    }\r\n                },\r\n                \"InstdAgt\": {\r\n                    \"FinInstnId\": {\r\n                        \"ClrSysMmbId\": {\r\n                            \"MmbId\": \"dfsp002\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"networkMap\": {\r\n        \"messages\": [\r\n            {\r\n                \"id\": \"004_037@1.0.0\",\r\n                \"host\": \"{{ofUrl}}function/off-transaction-aggregation-decisioning-processor-rel-1-0-0\",\r\n                \"cfg\": \"1.0.0\",\r\n                \"txTp\": \"pacs.002.001.12\",\r\n                \"channels\": [\r\n                    {\r\n                        \"id\": \"001@1.0.0\",\r\n                        \"host\": \"{{ofUrl}}function/off-channel-aggregation-decisioning-processor-rel-1-0-0\",\r\n                        \"cfg\": \"1.0.0\",\r\n                        \"typologies\": [\r\n                            {\r\n                                \"id\": \"999_037@1.0.0\",\r\n                                \"host\": \"{{ofUrl}}function/off-typology-processor-rel-1-0-0\",\r\n                                \"cfg\": \"1.0.0\",\r\n                                \"rules\": [\r\n                                    {\r\n                                        \"id\": \"037@1.0.0\",\r\n                                        \"host\": \"{{ofUrl}}function/off-rule-037-rel-1-0-0\",\r\n                                        \"cfg\": \"1.0.0\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ofUrl}}function/off-rule-037{{version}}/execute",
					"host": [
						"{{ofUrl}}function"
					],
					"path": [
						"off-rule-037{{version}}",
						"execute"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "transactionID",
			"value": "77aa-b99d-40cb-be9f-c9a402f6fc75"
		},
		{
			"key": "EndToEndId",
			"value": "'77aa-b99d-40cb-be9f-c9a402f6fc75'"
		}
	]
}