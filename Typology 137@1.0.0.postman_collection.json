{
	"info": {
		"_postman_id": "71d3fd6b-8337-42cb-b250-e1d4c0caaf02",
		"name": "Typology 137@1.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Update Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"//console.log(jsonData[\"jwt\"])",
							"",
							"pm.globals.set(\"arangoToken\", jsonData[\"jwt\"])",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{arangoUsername}}\",\r\n  \"password\": \"{{arangoPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{arangoUrl}}_open/auth",
					"host": [
						"{{arangoUrl}}_open"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "e2e pain001",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"const req = JSON.parse(request.data);",
							"const arangourl = pm.environment.get(\"arangoUrl\");",
							"",
							"// const transactions = [\"9990340081\"]",
							"",
							"// const graphTransactions = [",
							"//     jsonData.data.FIToFIPmtSts.GrpHdr.MsgId",
							"// ]",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"should not have errors\", function () {",
							"    pm.expect(jsonData).not.to.have.property('errors')",
							"});",
							"",
							"pm.test(\"should be a valid transaction\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
							"});",
							"",
							"// pm.test(\"should send to data preparation successfully\", function () {",
							"//     pm.expect(jsonData.sent).to.eql(true);",
							"// });",
							"",
							"// pm.test(\"should have the same outgoing and incoming json\", function () {",
							"//     pm.expect(jsonData.data).to.eql(req);",
							"// });",
							"",
							"",
							"// pm.test(\"Remove Seed Data from DB\", function () {",
							"//     pm.sendRequest({",
							"//         url: `${arangourl}_db/transactionHistory/_api/cursor`,",
							"//         method: 'POST',",
							"//         header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },",
							"//         body: {",
							"//             mode: 'raw',",
							"//             raw: JSON.stringify({",
							"//                 query: `FOR transaction IN ${JSON.stringify(transactions)}",
							"//                         REMOVE { _key: transaction } IN transactionHistory",
							"//                         OPTIONS { ignoreErrors: true }`",
							"//             })",
							"//         }",
							"//     })",
							"// });",
							"",
							"// pm.test(\"Remove Seed Data from transactionGraph\", function () {",
							"//     pm.sendRequest({",
							"//         url: `${arangourl}_db/pseudonyms/_api/cursor`,",
							"//         method: 'POST',",
							"//         header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },",
							"//         body: {",
							"//             mode: 'raw',",
							"//             raw: JSON.stringify({",
							"//                 query: `FOR transaction IN ${JSON.stringify(graphTransactions)}",
							"//                         REMOVE { _key: transaction } IN transactionRelationship",
							"//                         OPTIONS { ignoreErrors: true }`",
							"//             })",
							"//         }",
							"//     })",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const now = new Date().getTime();\r",
							"var moment = require('moment');\r",
							"pm.globals.set('date', moment().format((\"YYYY-MM-DD\")));\r",
							"const arangourl = pm.environment.get(\"arangoUrl\");\r",
							"const baseUrl = pm.environment.get(\"ofUrl\");\r",
							"const version = pm.environment.get(\"version\");\r",
							"pm.globals.set(\"now\", new Date().toISOString());\r",
							"\r",
							"var uuid = require('uuid');\r",
							"var myUUID = uuid.v4();\r",
							"pm.collectionVariables.set(\"shortGUID\", myUUID.slice(-32));\r",
							"\r",
							"let instrIdUUID = uuid.v4();\r",
							"let endToEndIdUUID = uuid.v4();\r",
							"pm.collectionVariables.set(\"orgnlInstrId\", instrIdUUID.replace(/-/g,''));\r",
							"pm.collectionVariables.set(\"orgnlEndToEndId\", endToEndIdUUID.slice(-32));\r",
							"\r",
							"console.log(`\"PmtInfId\": ${pm.collectionVariables.get(\"orgnlInstrId\")}`)\r",
							"console.log(`\"EndToEndId\": ${pm.collectionVariables.get(\"orgnlEndToEndId\")}`)\r",
							"\r",
							"let graphKey1 = uuid.v4();\r",
							"pm.collectionVariables.set(\"graphKey1\", graphKey1.slice(-32));\r",
							"\r",
							"let graphKey2 = uuid.v4();\r",
							"pm.collectionVariables.set(\"graphKey2\", graphKey2.slice(-32));\r",
							"\r",
							"let graphKey3 = uuid.v4();\r",
							"pm.collectionVariables.set(\"graphKey3\", graphKey3.slice(-32));\r",
							"\r",
							"let graphKey4 = uuid.v4();\r",
							"pm.collectionVariables.set(\"graphKey4\", graphKey4.slice(-32));\r",
							"\r",
							"//let entity036 = uuid.v4();\r",
							"pm.collectionVariables.set(\"entityId036\", \"Rule036\");\r",
							"pm.collectionVariables.set(\"entityId037\", \"Rule037\");\r",
							"\r",
							"// Setting random entity values for Creditor\r",
							"let tempCredId = Math.random().toString().slice(2,13)\r",
							"tempCredId = `+${tempCredId .slice(0,2)}-${tempCredId .slice(2,12)}`\r",
							"pm.collectionVariables.set(\"Creditor_Proprietary\", \"MSISDN\");\r",
							"pm.collectionVariables.set(\"Creditor_Identification\", tempCredId);\r",
							"pm.collectionVariables.set(\"Creditor_MemberIdentification\", \"dfsp002\");\r",
							"let creditorAccount = CryptoJS.SHA256(`${pm.collectionVariables.get(\"Creditor_MemberIdentification\")}${pm.collectionVariables.get(\"Creditor_Identification\")}${pm.collectionVariables.get(\"Creditor_Proprietary\")}`).toString();\r",
							"\r",
							"// Setting random entity values for Debtor\r",
							"let tempDebId = Math.random().toString().slice(2,13)\r",
							"tempDebId = `+${tempDebId .slice(0,2)}-${tempDebId .slice(2,12)}`\r",
							"pm.collectionVariables.set(\"Debtor_Proprietary\", \"MSISDN\");\r",
							"pm.collectionVariables.set(\"Debtor_Identification\", tempDebId);\r",
							"pm.collectionVariables.set(\"Debtor_MemberIdentification\", \"dfsp001\");\r",
							"let debtorAccount = CryptoJS.SHA256(`${pm.collectionVariables.get(\"Debtor_MemberIdentification\")}${pm.collectionVariables.get(\"Debtor_Identification\")}${pm.collectionVariables.get(\"Debtor_Proprietary\")}`).toString();\r",
							"\r",
							"console.log(creditorAccount)\r",
							"console.log(debtorAccount)\r",
							"\r",
							"const networkMaps = [\r",
							"    {\r",
							"        \"name\": \"typology999_137\",\r",
							"        \"key\": \"typology999_137\",\r",
							"        \"active\": true,\r",
							"        \"cfg\": \"1.0.0\",\r",
							"        \"messages\": [\r",
							"            {\r",
							"                \"id\": \"004_034@1.0.0\",\r",
							"                \"host\": `${baseUrl}function/off-transaction-aggregation-decisioning-processor-rel-1-0-0`,\r",
							"                \"cfg\": \"1.0.0\",\r",
							"                \"txTp\": \"pacs.002.001.12\",\r",
							"                \"channels\": [\r",
							"                    {\r",
							"                        \"id\": \"001@1.0.0\",\r",
							"                        \"host\": `${baseUrl}function/off-channel-aggregation-decisioning-processor-rel-1-0-0`,\r",
							"                        \"cfg\": \"1.0.0\",\r",
							"                        \"typologies\": [\r",
							"                            {\r",
							"                                \"id\": \"137@1.0.0\",\r",
							"                                \"host\": `${baseUrl}function/off-typology-processor-rel-1-0-0`,\r",
							"                                \"cfg\": \"1.0.0\",\r",
							"                                \"rules\": [\r",
							"                                    {\r",
							"                                        \"id\": \"034@1.0.0\",\r",
							"                                        \"host\": `${baseUrl}function/off-rule-034-rel-1-0-0`,\r",
							"                                        \"cfg\": \"1.0.0\"\r",
							"                                    },\r",
							"                                    {\r",
							"                                        \"id\": \"035@1.0.0\",\r",
							"                                        \"host\": `${baseUrl}function/off-rule-035-rel-1-0-0`,\r",
							"                                        \"cfg\": \"1.0.0\"\r",
							"                                    },\r",
							"                                    {\r",
							"                                        \"id\": \"036@1.0.0\",\r",
							"                                        \"host\": `${baseUrl}function/off-rule-036-rel-1-0-0`,\r",
							"                                        \"cfg\": \"1.0.0\"\r",
							"                                    },\r",
							"                                    {\r",
							"                                        \"id\": \"037@1.0.0\",\r",
							"                                        \"host\": `${baseUrl}function/off-rule-037-rel-1-0-0`,\r",
							"                                        \"cfg\": \"1.0.0\"\r",
							"                                    },\r",
							"                                    {\r",
							"                                        \"id\": \"091@1.0.0\",\r",
							"                                        \"host\": `${baseUrl}function/off-rule-091-rel-1-0-0`,\r",
							"                                        \"cfg\": \"1.0.0\"\r",
							"                                    }\r",
							"                                ]\r",
							"                            }\r",
							"                        ]\r",
							"                    }\r",
							"                ]\r",
							"            }\r",
							"        ]\r",
							"    }\r",
							"]\r",
							"\r",
							"// rule 034\r",
							"const listEntry = [\r",
							"    {\r",
							"        _key: \"typology999_137_034\",\r",
							"        account: `${creditorAccount}`,\r",
							"        status: \"active\",\r",
							"        timestamp: new Date( new Date (now - 86,400,000))\r",
							"    }\r",
							"]\r",
							"\r",
							"const transactionGraph = [\r",
							"    {\r",
							"        \"_key\": pm.collectionVariables.get(\"graphKey1\"),\r",
							"        \"_id\": `transactionRelationship/${pm.collectionVariables.get(\"graphKey1\")}`,\r",
							"        \"_from\": `accounts/${creditorAccount}`,\r",
							"        \"_to\": `accounts/${debtorAccount}`,\r",
							"        \"TxTp\": \"pacs.008.001.10\",\r",
							"        \"CreDtTm\": new Date(now - 10000).toISOString(),\r",
							"        \"Amt\": 95715423688371100,\r",
							"        \"Ccy\": \"USD\",\r",
							"        \"PmtInfId\": pm.collectionVariables.get(\"orgnlInstrId\"),\r",
							"        \"EndToEndId\": pm.collectionVariables.get(\"orgnlEndToEndId\")\r",
							"    }\r",
							"]\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/transactionHistory/_api/cursor`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR entry IN ${JSON.stringify(listEntry)}\r",
							"                    INSERT {_key: entry._key, account: entry.account, status: entry.status, timestamp: entry.timestamp} INTO list\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR transaction IN ${JSON.stringify(transactionGraph)}\r",
							"                    INSERT transaction INTO transactionRelationship\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"// rule 035\r",
							"\r",
							"const listEntry2 = [\r",
							"    {\r",
							"        _key: \"typology999_137_035\",\r",
							"        account: `${debtorAccount}`,\r",
							"        status: \"active\",\r",
							"    }\r",
							"]\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/transactionHistory/_api/cursor`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR entry IN ${JSON.stringify(listEntry2)}\r",
							"                    INSERT {_key: entry._key, account: entry.account, status: entry.status, timestamp: entry.timestamp} INTO list\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"//rule 036\r",
							"const transactionGraph3 = [\r",
							"    {\r",
							"        \"_key\": pm.collectionVariables.get(\"graphKey3\"),\r",
							"        \"_from\": `accounts/${creditorAccount}`,\r",
							"        \"_to\": `accounts/${debtorAccount}`,\r",
							"        \"TxTp\": \"pacs.002.001.12\",\r",
							"        \"TxSts\": \"ACCC\",\r",
							"        \"PmtInfId\": pm.collectionVariables.get(\"orgnlInstrId\"),\r",
							"        \"EndToEndId\": pm.collectionVariables.get(\"orgnlEndToEndId\"),\r",
							"        \"CreDtTm\": new Date(now - 10000).toISOString()\r",
							"    }\r",
							"]\r",
							"\r",
							"const accountHolder3 = [\r",
							"    {\r",
							"        _from: `entities/${pm.collectionVariables.get(\"entityId036\")}`,\r",
							"        _to: `accounts/${debtorAccount}`,\r",
							"        CreDtTm: new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const entities3 = [\r",
							"    {\r",
							"        _key: 'typology999_137_036',\r",
							"        _id: `entities/${pm.collectionVariables.get(\"entityId036\")}`,\r",
							"        Id: pm.collectionVariables.get(\"entityId036\"),\r",
							"        CreDtTm: new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const watchlist3 = [\r",
							"    {\r",
							"        \"party_id\": pm.collectionVariables.get(\"entityId036\"),\r",
							"        \"status\": \"ACTIVE\",\r",
							"        \"time-stamp\": new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR transaction IN ${JSON.stringify(transactionGraph3)}\r",
							"                    INSERT transaction INTO transactionRelationship\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"// Seed entity to Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR entity IN ${JSON.stringify(entities3)}\r",
							"                    INSERT entity INTO entities\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"}, () => {\r",
							"    // Seed accountHolder to Graph Database\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR holder IN ${JSON.stringify(accountHolder3)}\r",
							"                        INSERT holder INTO account_holder\r",
							"                        OPTIONS { overwrite: true }`\r",
							"            })\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/transactionHistory/_api/cursor`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR obj IN ${JSON.stringify(watchlist3)}\r",
							"                    INSERT obj INTO watchlist\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"// rule 037\r",
							"\r",
							"const transactionGraph4 = [\r",
							"    {\r",
							"        \"_key\": pm.collectionVariables.get(\"graphKey4\"),\r",
							"        \"_from\": `accounts/${creditorAccount}`,\r",
							"        \"_to\": `accounts/${debtorAccount}`,\r",
							"        \"TxTp\": \"pacs.002.001.12\",\r",
							"        \"TxSts\": \"ACCC\",\r",
							"        \"CreDtTm\": new Date(now - 10000).toISOString(),\r",
							"        \"PmtInfId\": pm.collectionVariables.get(\"orgnlInstrId\"),\r",
							"        \"EndToEndId\": pm.collectionVariables.get(\"orgnlEndToEndId\")\r",
							"    }\r",
							"]\r",
							"\r",
							"const accountHolder4 = [\r",
							"    {\r",
							"        _from: `entities/${pm.collectionVariables.get(\"entityId037\")}`,\r",
							"        _to: `accounts/${creditorAccount}`,\r",
							"        CreDtTm: new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const entities4 = [\r",
							"    {\r",
							"        _key: pm.collectionVariables.get(\"entityId037\"),\r",
							"        _id: `entities/${pm.collectionVariables.get(\"entityId037\")}`,\r",
							"        Id: pm.collectionVariables.get(\"entityId037\"),\r",
							"        CreDtTm: new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"const watchlist4 = [\r",
							"    {\r",
							"        \"party_id\": pm.collectionVariables.get(\"entityId037\"),\r",
							"        \"status\": \"ACTIVE\",\r",
							"        \"time-stamp\": new Date(now - 10000).toISOString(),\r",
							"    }\r",
							"]\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR transaction IN ${JSON.stringify(transactionGraph4)}\r",
							"                    INSERT transaction INTO transactionRelationship\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"// Seed entity to Database\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR entity IN ${JSON.stringify(entities4)}\r",
							"                    INSERT entity INTO entities\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"}, () => {\r",
							"    // Seed accountHolder to Graph Database\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/pseudonyms/_api/cursor`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR holder IN ${JSON.stringify(accountHolder4)}\r",
							"                        INSERT holder INTO account_holder\r",
							"                        OPTIONS { overwrite: true }`\r",
							"            })\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/transactionHistory/_api/cursor`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR obj IN ${JSON.stringify(watchlist4)}\r",
							"                    INSERT obj INTO watchlist\r",
							"                    OPTIONS { overwrite: true }`\r",
							"        })\r",
							"    }\r",
							"});\r",
							"\r",
							"//rule 091\r",
							"// exceed amount 10000 to go over threshold\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${arangourl}_db/networkmap/_api/cursor?waitForSync=true`,\r",
							"    method: 'POST',\r",
							"    header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            query: `FOR doc IN networkConfiguration\r",
							"                    FILTER doc.active == true\r",
							"                    UPDATE doc WITH { active: false } IN networkConfiguration`\r",
							"        })\r",
							"    }\r",
							"}, () => {\r",
							"    pm.sendRequest({\r",
							"        url: `${arangourl}_db/networkmap/_api/cursor?waitForSync=true`,\r",
							"        method: 'POST',\r",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                query: `FOR networkmap IN ${JSON.stringify(networkMaps)}\r",
							"                            INSERT {_id: networkmap._id, _key: networkmap.key, active: networkmap.active, cfg: networkmap.cfg, messages: networkmap.messages} INTO networkConfiguration\r",
							"                            OPTIONS { overwrite: true }`\r",
							"            })\r",
							"        }\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"TxTp\": \"pain.001.001.11\",\n    \"CstmrCdtTrfInitn\": {\n        \"GrpHdr\": {\n            \"MsgId\": \"{{shortGUID}}\",\n            \"CreDtTm\": \"{{now}}\",\n            \"NbOfTxs\": 1,\n            \"InitgPty\": {\n                \"Nm\": \"April Blake Grant\",\n                \"Id\": {\n                    \"PrvtId\": {\n                        \"DtAndPlcOfBirth\": {\n                            \"BirthDt\": \"1968-02-01\",\n                            \"CityOfBirth\": \"Unknown\",\n                            \"CtryOfBirth\": \"ZZ\"\n                        },\n                        \"Othr\": {\n                            \"Id\": \"{{Debtor_Identification}}\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"{{Debtor_Proprietary}}\"\n                            }\n                        }\n                    }\n                },\n                \"CtctDtls\": {\n                    \"MobNb\": \"{{Debtor_Identification}}\"\n                }\n            }\n        },\n        \"PmtInf\": {\n            \"PmtInfId\": \"{{orgnlInstrId}}\",\n            \"PmtMtd\": \"TRA\",\n            \"ReqdAdvcTp\": {\n                \"DbtAdvc\": {\n                    \"Cd\": \"ADWD\",\n                    \"Prtry\": \"Advice with transaction details\"\n                }\n            },\n            \"ReqdExctnDt\": {\n                \"Dt\": \"{{date}}\",\n                \"DtTm\": \"{{now}}\"\n            },\n            \"Dbtr\": {\n                \"Nm\": \"April Blake Grant\",\n                \"Id\": {\n                    \"PrvtId\": {\n                        \"DtAndPlcOfBirth\": {\n                            \"BirthDt\": \"1968-02-01\",\n                            \"CityOfBirth\": \"Unknown\",\n                            \"CtryOfBirth\": \"ZZ\"\n                        },\n                        \"Othr\": {\n                            \"Id\": \"{{Debtor_Identification}}\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"Rule036\"\n                            }\n                        }\n                    }\n                },\n                \"CtctDtls\": {\n                    \"MobNb\": \"{{Debtor_Identification}}\"\n                }\n            },\n            \"DbtrAcct\": {\n                \"Id\": {\n                    \"Othr\": {\n                        \"Id\": \"{{Debtor_Identification}}\",\n                        \"SchmeNm\": {\n                            \"Prtry\": \"{{Debtor_Proprietary}}\"\n                        }\n                    }\n                },\n                \"Nm\": \"April Grant\"\n            },\n            \"DbtrAgt\": {\n                \"FinInstnId\": {\n                    \"ClrSysMmbId\": {\n                        \"MmbId\": \"{{Debtor_MemberIdentification}}\"\n                    }\n                }\n            },\n            \"CdtTrfTxInf\": {\n                \"PmtId\": {\n                    \"EndToEndId\": \"{{orgnlEndToEndId}}\"\n                },\n                \"PmtTpInf\": {\n                    \"CtgyPurp\": {\n                        \"Prtry\": \"TRANSFER BLANK\"\n                    }\n                },\n                \"Amt\": {\n                    \"InstdAmt\": {\n                        \"Amt\": {\n                            \"Amt\": 31020.89,\n                            \"Ccy\": \"USD\"\n                        }\n                    },\n                    \"EqvtAmt\": {\n                        \"Amt\": {\n                            \"Amt\": 31020.89,\n                            \"Ccy\": \"USD\"\n                        },\n                        \"CcyOfTrf\": \"USD\"\n                    }\n                },\n                \"ChrgBr\": \"DEBT\",\n                \"CdtrAgt\": {\n                    \"FinInstnId\": {\n                        \"ClrSysMmbId\": {\n                            \"MmbId\": \"{{Creditor_MemberIdentification}}\"\n                        }\n                    }\n                },\n                \"Cdtr\": {\n                    \"Nm\": \"Felicia Easton Quill\",\n                    \"Id\": {\n                        \"PrvtId\": {\n                            \"DtAndPlcOfBirth\": {\n                                \"BirthDt\": \"1935-05-08\",\n                                \"CityOfBirth\": \"Unknown\",\n                                \"CtryOfBirth\": \"ZZ\"\n                            },\n                            \"Othr\": {\n                                \"Id\": \"{{Creditor_Identification}}\",\n                                \"SchmeNm\": {\n                                    \"Prtry\": \"{{Creditor_Proprietary}}\"\n                                }\n                            }\n                        }\n                    },\n                    \"CtctDtls\": {\n                        \"MobNb\": \"{{Creditor_Identification}}\"\n                    }\n                },\n                \"CdtrAcct\": {\n                    \"Id\": {\n                        \"Othr\": {\n                            \"Id\": \"{{Creditor_Identification}}\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"{{Creditor_Proprietary}}\"\n                            }\n                        }\n                    },\n                    \"Nm\": \"Felicia Quill\"\n                },\n                \"Purp\": {\n                    \"Cd\": \"MP2P\"\n                },\n                \"RgltryRptg\": {\n                    \"Dtls\": {\n                        \"Tp\": \"BALANCE OF PAYMENTS\",\n                        \"Cd\": \"100\"\n                    }\n                },\n                \"RmtInf\": {\n                    \"Ustrd\": \"Payment of USD 30713.75 from April to Felicia\"\n                },\n                \"SplmtryData\": {\n                    \"Envlp\": {\n                        \"Doc\": {\n                            \"Dbtr\": {\n                                \"FrstNm\": \"April\",\n                                \"MddlNm\": \"Blake\",\n                                \"LastNm\": \"Grant\",\n                                \"MrchntClssfctnCd\": \"BLANK\"\n                            },\n                            \"Cdtr\": {\n                                \"FrstNm\": \"Felicia\",\n                                \"MddlNm\": \"Easton\",\n                                \"LastNm\": \"Quill\",\n                                \"MrchntClssfctnCd\": \"BLANK\"\n                            },\n                            \"DbtrFinSvcsPrvdrFees\": {\n                                \"Ccy\": \"USD\",\n                                \"Amt\": 307.14\n                            },\n                            \"Xprtn\": \"2021-11-30T10:38:56.000Z\"\n                        }\n                    }\n                }\n            }\n        },\n        \"SplmtryData\": {\n            \"Envlp\": {\n                \"Doc\": {\n                    \"InitgPty\": {\n                        \"InitrTp\": \"CONSUMER\",\n                        \"Glctn\": {\n                            \"Lat\": \"-3,1609\",\n                            \"Long\": \"38,3588\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ofUrl}}function/off-transaction-monitoring-service{{TMSversion}}/execute",
					"host": [
						"{{ofUrl}}function"
					],
					"path": [
						"off-transaction-monitoring-service{{TMSversion}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "e2e pain013",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"const req = JSON.parse(request.data);",
							"const arangourl = pm.environment.get(\"arangoUrl\");",
							"",
							"// const transactions = [\"9990340081\"]",
							"",
							"// const graphTransactions = [",
							"//     jsonData.data.FIToFIPmtSts.GrpHdr.MsgId",
							"// ]",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"should not have errors\", function () {",
							"    pm.expect(jsonData).not.to.have.property('errors')",
							"});",
							"",
							"pm.test(\"should be a valid transaction\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
							"});",
							"",
							"// pm.test(\"should send to data preparation successfully\", function () {",
							"//     pm.expect(jsonData.sent).to.eql(true);",
							"// });",
							"",
							"// pm.test(\"should have the same outgoing and incoming json\", function () {",
							"//     pm.expect(jsonData.data).to.eql(req);",
							"// });",
							"",
							"",
							"// pm.test(\"Remove Seed Data from DB\", function () {",
							"//     pm.sendRequest({",
							"//         url: `${arangourl}_db/transactionHistory/_api/cursor`,",
							"//         method: 'POST',",
							"//         header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },",
							"//         body: {",
							"//             mode: 'raw',",
							"//             raw: JSON.stringify({",
							"//                 query: `FOR transaction IN ${JSON.stringify(transactions)}",
							"//                         REMOVE { _key: transaction } IN transactionHistory",
							"//                         OPTIONS { ignoreErrors: true }`",
							"//             })",
							"//         }",
							"//     })",
							"// });",
							"",
							"// pm.test(\"Remove Seed Data from transactionGraph\", function () {",
							"//     pm.sendRequest({",
							"//         url: `${arangourl}_db/pseudonyms/_api/cursor`,",
							"//         method: 'POST',",
							"//         header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },",
							"//         body: {",
							"//             mode: 'raw',",
							"//             raw: JSON.stringify({",
							"//                 query: `FOR transaction IN ${JSON.stringify(graphTransactions)}",
							"//                         REMOVE { _key: transaction } IN transactionRelationship",
							"//                         OPTIONS { ignoreErrors: true }`",
							"//             })",
							"//         }",
							"//     })",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.globals.set(\"now\", new Date().toISOString());\r",
							"\r",
							"var uuid = require('uuid');\r",
							"var myUUID = uuid.v4();\r",
							"pm.collectionVariables.set(\"shortGUID\", myUUID.slice(-32));\r",
							"\r",
							"console.log(`\"PmtInfId\": ${pm.collectionVariables.get(\"orgnlInstrId\")}`)\r",
							"console.log(`\"EndToEndId\": ${pm.collectionVariables.get(\"orgnlEndToEndId\")}`)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"TxTp\": \"pain.013.001.09\",\n    \"CdtrPmtActvtnReq\": {\n        \"GrpHdr\": {\n            \"MsgId\": \"{{shortGUID}}\",\n            \"CreDtTm\": \"{{now}}\",\n            \"NbOfTxs\": 1,\n            \"InitgPty\": {\n                \"Nm\": \"Horatio Sam Ford\",\n                \"Id\": {\n                    \"PrvtId\": {\n                        \"DtAndPlcOfBirth\": {\n                            \"BirthDt\": \"1981-04-11\",\n                            \"CityOfBirth\": \"Unknown\",\n                            \"CtryOfBirth\": \"ZZ\"\n                        },\n                        \"Othr\": {\n                            \"Id\": \"{{Debtor_Identification}}\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"{{Debtor_Proprietary}}\"\n                            }\n                        }\n                    }\n                },\n                \"CtctDtls\": {\n                    \"MobNb\": \"{{Debtor_Identification}}\"\n                }\n            }\n        },\n        \"PmtInf\": {\n            \"PmtInfId\": \"{{orgnlInstrId}}\",\n            \"PmtMtd\": \"TRA\",\n            \"ReqdAdvcTp\": {\n                \"DbtAdvc\": {\n                    \"Cd\": \"ADWD\",\n                    \"Prtry\": \"Advice with transaction details\"\n                }\n            },\n            \"ReqdExctnDt\": {\n                \"DtTm\": \"{{now}}\"\n            },\n            \"XpryDt\": {\n                \"DtTm\": \"{{now}}\"\n            },\n            \"Dbtr\": {\n                \"Nm\": \"{{now}}\",\n                \"Id\": {\n                    \"PrvtId\": {\n                        \"DtAndPlcOfBirth\": {\n                            \"BirthDt\": \"2021-10-07\",\n                            \"CityOfBirth\": \"Unknown\",\n                            \"CtryOfBirth\": \"zz\"\n                        },\n                        \"Othr\": {\n                            \"Id\": \"ZZ\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"{{Debtor_Identification}}\"\n                            }\n                        }\n                    }\n                },\n                \"CtctDtls\": {\n                    \"MobNb\": \"{{Debtor_Identification}}\"\n                }\n            },\n            \"DbtrAcct\": {\n                \"Id\": {\n                    \"Othr\": {\n                        \"Id\": \"{{Debtor_Identification}}\",\n                        \"SchmeNm\": {\n                            \"Prtry\": \"{{Debtor_Identification}}\"\n                        },\n                        \"Nm\": \"PASSPORT\"\n                    }\n                }\n            },\n            \"DbtrAgt\": {\n                \"FinInstnId\": {\n                    \"ClrSysMmbId\": {\n                        \"MmbId\": \"Horatio Ford\"\n                    }\n                }\n            },\n            \"CdtTrfTxInf\": {\n                \"PmtId\": {\n                    \"EndToEndId\": \"{{orgnlEndToEndId}}\"\n                },\n                \"PmtTpInf\": {\n                    \"CtgyPurp\": {\n                        \"Prtry\": \"TRANSFER\"\n                    }\n                },\n                \"Amt\": {\n                    \"InstdAmt\": {\n                        \"Amt\": {\n                            \"Amt\": 50431891779910900,\n                            \"Ccy\": \"USD\"\n                        }\n                    },\n                    \"EqvtAmt\": {\n                        \"Amt\": {\n                            \"Amt\": 50431891779910900,\n                            \"Ccy\": \"USD\"\n                        },\n                        \"CcyOfTrf\": \"USD\"\n                    }\n                },\n                \"ChrgBr\": \"DEBT\",\n                \"CdtrAgt\": {\n                    \"FinInstnId\": {\n                        \"ClrSysMmbId\": {\n                            \"MmbId\": \"{{Creditor_MemberIdentification}}\"\n                        }\n                    }\n                },\n                \"Cdtr\": {\n                    \"Nm\": \"April Sam Adamson\",\n                    \"Id\": {\n                        \"PrvtId\": {\n                            \"DtAndPlcOfBirth\": {\n                                \"BirthDt\": \"1923-04-26\",\n                                \"CityOfBirth\": \"Unknown\",\n                                \"CtryOfBirth\": \"ZZ\"\n                            },\n                            \"Othr\": {\n                                \"Id\": \"{{Creditor_Identification}}\",\n                                \"SchmeNm\": {\n                                    \"Prtry\": \"{{Creditor_Proprietary}}\"\n                                }\n                            }\n                        }\n                    },\n                    \"CtctDtls\": {\n                        \"MobNb\": \"{{Creditor_Identification}}\"\n                    }\n                },\n                \"CdtrAcct\": {\n                    \"Id\": {\n                        \"Othr\": {\n                            \"Id\": \"{{Creditor_Identification}}\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"{{Creditor_MemberIdentification}}\"\n                            }\n                        }\n                    },\n                    \"Nm\": \"April Adamson\"\n                },\n                \"Purp\": {\n                    \"Cd\": \"MP2P\"\n                },\n                \"RgltryRptg\": {\n                    \"Dtls\": {\n                        \"Tp\": \"BALANCE OF PAYMENTS\",\n                        \"Cd\": \"100\"\n                    }\n                },\n                \"RmtInf\": {\n                    \"Ustrd\": \"Payment of USD 49932566118723700.89 from Ivan to April\"\n                },\n                \"SplmtryData\": {\n                    \"Envlp\": {\n                        \"Doc\": {\n                            \"PyeeRcvAmt\": {\n                                \"Amt\": {\n                                    \"Amt\": 4906747824834590.33,\n                                    \"Ccy\": \"USD\"\n                                }\n                            },\n                            \"PyeeFinSvcsPrvdrFee\": {\n                                \"Amt\": {\n                                    \"Amt\": 49067478248345.9,\n                                    \"Ccy\": \"USD\"\n                                }\n                            },\n                            \"PyeeFinSvcsPrvdrComssn\": {\n                                \"Amt\": {\n                                    \"Amt\": 0,\n                                    \"Ccy\": \"USD\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"SplmtryData\": {\n            \"Envlp\": {\n                \"Doc\": {\n                    \"InitgPty\": {\n                        \"Glctn\": {\n                            \"Lat\": \"-3.1675\",\n                            \"Long\": \"39.059\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ofUrl}}function/off-transaction-monitoring-service{{TMSversion}}/quoteReply",
					"host": [
						"{{ofUrl}}function"
					],
					"path": [
						"off-transaction-monitoring-service{{TMSversion}}",
						"quoteReply"
					]
				}
			},
			"response": []
		},
		{
			"name": "e2e pacs008",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"const req = JSON.parse(request.data);",
							"const arangourl = pm.environment.get(\"arangoUrl\");",
							"",
							"// const transactions = [\"9990340081\"]",
							"",
							"// const graphTransactions = [",
							"//     jsonData.data.FIToFIPmtSts.GrpHdr.MsgId",
							"// ]",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"should not have errors\", function () {",
							"    pm.expect(jsonData).not.to.have.property('errors')",
							"});",
							"",
							"pm.test(\"should be a valid transaction\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
							"});",
							"",
							"// pm.test(\"should send to data preparation successfully\", function () {",
							"//     pm.expect(jsonData.sent).to.eql(true);",
							"// });",
							"",
							"// pm.test(\"should have the same outgoing and incoming json\", function () {",
							"//     pm.expect(jsonData.data).to.eql(req);",
							"// });",
							"",
							"",
							"// pm.test(\"Remove Seed Data from DB\", function () {",
							"//     pm.sendRequest({",
							"//         url: `${arangourl}_db/transactionHistory/_api/cursor`,",
							"//         method: 'POST',",
							"//         header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },",
							"//         body: {",
							"//             mode: 'raw',",
							"//             raw: JSON.stringify({",
							"//                 query: `FOR transaction IN ${JSON.stringify(transactions)}",
							"//                         REMOVE { _key: transaction } IN transactionHistory",
							"//                         OPTIONS { ignoreErrors: true }`",
							"//             })",
							"//         }",
							"//     })",
							"// });",
							"",
							"// pm.test(\"Remove Seed Data from transactionGraph\", function () {",
							"//     pm.sendRequest({",
							"//         url: `${arangourl}_db/pseudonyms/_api/cursor`,",
							"//         method: 'POST',",
							"//         header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },",
							"//         body: {",
							"//             mode: 'raw',",
							"//             raw: JSON.stringify({",
							"//                 query: `FOR transaction IN ${JSON.stringify(graphTransactions)}",
							"//                         REMOVE { _key: transaction } IN transactionRelationship",
							"//                         OPTIONS { ignoreErrors: true }`",
							"//             })",
							"//         }",
							"//     })",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.globals.set(\"now\", new Date().toISOString());\r",
							"\r",
							"var uuid = require('uuid');\r",
							"var myUUID = uuid.v4();\r",
							"pm.collectionVariables.set(\"shortGUID\", myUUID.slice(-32));\r",
							"\r",
							"console.log(`\"PmtInfId\": ${pm.collectionVariables.get(\"orgnlInstrId\")}`)\r",
							"console.log(`\"EndToEndId\": ${pm.collectionVariables.get(\"orgnlEndToEndId\")}`)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"TxTp\": \"pacs.008.001.10\",\n    \"FIToFICstmrCdt\": {\n        \"GrpHdr\": {\n            \"MsgId\": \"{{shortGUID}}\",\n            \"CreDtTm\": \"{{now}}\",\n            \"NbOfTxs\": 1,\n            \"SttlmInf\": {\n                \"SttlmMtd\": \"CLRG\"\n            }\n        },\n        \"CdtTrfTxInf\": {\n            \"PmtId\": {\n                \"InstrId\": \"{{orgnlInstrId}}\",\n                \"EndToEndId\": \"{{orgnlEndToEndId}}\"\n            },\n            \"IntrBkSttlmAmt\": {\n                \"Amt\": {\n                    \"Amt\": 31020.89,\n                    \"Ccy\": \"USD\"\n                }\n            },\n            \"InstdAmt\": {\n                \"Amt\": {\n                    \"Amt\": 9000,\n                    \"Ccy\": \"ZAR\"\n                }\n            },\n            \"ChrgBr\": \"DEBT\",\n            \"ChrgsInf\": {\n                \"Amt\": {\n                    \"Amt\": 307.14,\n                    \"Ccy\": \"USD\"\n                },\n                \"Agt\": {\n                    \"FinInstnId\": {\n                        \"ClrSysMmbId\": {\n                            \"MmbId\": \"{{Debtor_MemberIdentification}}\"\n                        }\n                    }\n                }\n            },\n            \"InitgPty\": {\n                \"Nm\": \"April Blake Grant\",\n                \"Id\": {\n                    \"PrvtId\": {\n                        \"DtAndPlcOfBirth\": {\n                            \"BirthDt\": \"1968-02-01\",\n                            \"CityOfBirth\": \"Unknown\",\n                            \"CtryOfBirth\": \"ZZ\"\n                        },\n                        \"Othr\": {\n                            \"Id\": \"{{Debtor_Identification}}\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"{{Debtor_Proprietary}}\"\n                            }\n                        }\n                    }\n                },\n                \"CtctDtls\": {\n                    \"MobNb\": \"{{Debtor_Identification}}\"\n                }\n            },\n            \"Dbtr\": {\n                \"Nm\": \"April Blake Grant\",\n                \"Id\": {\n                    \"PrvtId\": {\n                        \"DtAndPlcOfBirth\": {\n                            \"BirthDt\": \"1968-02-01\",\n                            \"CityOfBirth\": \"Unknown\",\n                            \"CtryOfBirth\": \"ZZ\"\n                        },\n                        \"Othr\": {\n                            \"Id\": \"{{Debtor_Identification}}\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"{{Debtor_Proprietary}}\"\n                            }\n                        }\n                    }\n                },\n                \"CtctDtls\": {\n                    \"MobNb\": \"{{Debtor_Identification}}\"\n                }\n            },\n            \"DbtrAcct\": {\n                \"Id\": {\n                    \"Othr\": {\n                        \"Id\": \"{{Debtor_Identification}}\",\n                        \"SchmeNm\": {\n                            \"Prtry\": \"Rule036\"\n                        }\n                    }\n                },\n                \"Nm\": \"April Grant\"\n            },\n            \"DbtrAgt\": {\n                \"FinInstnId\": {\n                    \"ClrSysMmbId\": {\n                        \"MmbId\": \"{{Debtor_MemberIdentification}}\"\n                    }\n                }\n            },\n            \"CdtrAgt\": {\n                \"FinInstnId\": {\n                    \"ClrSysMmbId\": {\n                        \"MmbId\": \"{{Creditor_MemberIdentification}}\"\n                    }\n                }\n            },\n            \"Cdtr\": {\n                \"Nm\": \"Felicia Easton Quill\",\n                \"Id\": {\n                    \"PrvtId\": {\n                        \"DtAndPlcOfBirth\": {\n                            \"BirthDt\": \"1935-05-08\",\n                            \"CityOfBirth\": \"Unknown\",\n                            \"CtryOfBirth\": \"ZZ\"\n                        },\n                        \"Othr\": {\n                            \"Id\": \"{{Creditor_Identification}}\",\n                            \"SchmeNm\": {\n                                \"Prtry\": \"{{Creditor_Proprietary}}\"\n                            }\n                        }\n                    }\n                },\n                \"CtctDtls\": {\n                    \"MobNb\": \"{{Creditor_Identification}}\"\n                }\n            },\n            \"CdtrAcct\": {\n                \"Id\": {\n                    \"Othr\": {\n                        \"Id\": \"{{Creditor_Identification}}\",\n                        \"SchmeNm\": {\n                            \"Prtry\": \"{{Creditor_Proprietary}}\"\n                        }\n                    }\n                },\n                \"Nm\": \"Felicia Quill\"\n            },\n            \"Purp\": {\n                \"Cd\": \"MP2P\"\n            }\n        },\n        \"RgltryRptg\": {\n            \"Dtls\": {\n                \"Tp\": \"BALANCE OF PAYMENTS\",\n                \"Cd\": \"100\"\n            }\n        },\n        \"RmtInf\": {\n            \"Ustrd\": \"Payment of USD 30713.75 from April to Felicia\"\n        },\n        \"SplmtryData\": {\n            \"Envlp\": {\n                \"Doc\": {\n                    \"Xprtn\": \"{{now}}\"\n                }\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ofUrl}}function/off-transaction-monitoring-service{{TMSversion}}/transfer",
					"host": [
						"{{ofUrl}}function"
					],
					"path": [
						"off-transaction-monitoring-service{{TMSversion}}",
						"transfer"
					]
				}
			},
			"response": []
		},
		{
			"name": "e2e pacs002",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"const req = JSON.parse(request.data);",
							"const arangourl = pm.environment.get(\"arangoUrl\");",
							"",
							"const transactions = [\"9990340081\"]",
							"",
							"const graphTransactions = [",
							"    jsonData.data.FIToFIPmtSts.GrpHdr.MsgId",
							"]",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"should not have errors\", function () {",
							"    pm.expect(jsonData).not.to.have.property('errors')",
							"});",
							"",
							"pm.test(\"should be a valid transaction\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Transaction is valid\");",
							"});",
							"",
							"pm.test(\"should send to data preparation successfully\", function () {",
							"    pm.expect(jsonData.sent).to.eql(true);",
							"});",
							"",
							"pm.test(\"should have the same outgoing and incoming json\", function () {",
							"    pm.expect(jsonData.data).to.eql(req);",
							"});",
							"",
							"",
							"pm.test(\"Remove Seed Data from DB\", function () {",
							"    pm.sendRequest({",
							"        url: `${arangourl}_db/transactionHistory/_api/cursor`,",
							"        method: 'POST',",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                query: `FOR transaction IN ${JSON.stringify(transactions)}",
							"                        REMOVE { _key: transaction } IN transactionHistory",
							"                        OPTIONS { ignoreErrors: true }`",
							"            })",
							"        }",
							"    })",
							"});",
							"",
							"pm.test(\"Remove Seed Data from transactionGraph\", function () {",
							"    pm.sendRequest({",
							"        url: `${arangourl}_db/pseudonyms/_api/cursor`,",
							"        method: 'POST',",
							"        header: { 'Authorization': `Bearer ${pm.globals.get(\"arangoToken\")}` },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                query: `FOR transaction IN ${JSON.stringify(graphTransactions)}",
							"                        REMOVE { _key: transaction } IN transactionRelationship",
							"                        OPTIONS { ignoreErrors: true }`",
							"            })",
							"        }",
							"    })",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.globals.set(\"now\", new Date().toISOString());\r",
							"\r",
							"var uuid = require('uuid');\r",
							"var myUUID = uuid.v4();\r",
							"pm.collectionVariables.set(\"transactionID\", myUUID.slice(-32));\r",
							"\r",
							"console.log(`\"PmtInfId\": ${pm.collectionVariables.get(\"orgnlInstrId\")}`)\r",
							"console.log(`\"EndToEndId\": ${pm.collectionVariables.get(\"orgnlEndToEndId\")}`)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"TxTp\": \"pacs.002.001.12\",\n    \"FIToFIPmtSts\": {\n        \"GrpHdr\": {\n            \"MsgId\": \"{{transactionID}}\",\n            \"CreDtTm\": \"{{now}}\"\n        },\n        \"TxInfAndSts\": {\n            \"OrgnlInstrId\": \"{{orgnlInstrId}}\",\n            \"OrgnlEndToEndId\": \"{{orgnlEndToEndId}}\",\n            \"TxSts\": \"ACCC\",\n            \"ChrgsInf\": [\n                {\n                    \"Amt\": {\n                        \"Amt\": 307.14,\n                        \"Ccy\": \"USD\"\n                    },\n                    \"Agt\": {\n                        \"FinInstnId\": {\n                            \"ClrSysMmbId\": {\n                                \"MmbId\": \"{{Debtor_MemberIdentification}}\"\n                            }\n                        }\n                    }\n                },\n                {\n                    \"Amt\": {\n                        \"Amt\": 153.57,\n                        \"Ccy\": \"USD\"\n                    },\n                    \"Agt\": {\n                        \"FinInstnId\": {\n                            \"ClrSysMmbId\": {\n                                \"MmbId\": \"{{Debtor_MemberIdentification}}\"\n                            }\n                        }\n                    }\n                },\n                {\n                    \"Amt\": {\n                        \"Amt\": 30.71,\n                        \"Ccy\": \"USD\"\n                    },\n                    \"Agt\": {\n                        \"FinInstnId\": {\n                            \"ClrSysMmbId\": {\n                                \"MmbId\": \"{{Creditor_MemberIdentification}}\"\n                            }\n                        }\n                    }\n                }\n            ],\n            \"AccptncDtTm\": \"{{now}}\",\n            \"InstgAgt\": {\n                \"FinInstnId\": {\n                    \"ClrSysMmbId\": {\n                        \"MmbId\": \"{{Debtor_MemberIdentification}}\"\n                    }\n                }\n            },\n            \"InstdAgt\": {\n                \"FinInstnId\": {\n                    \"ClrSysMmbId\": {\n                        \"MmbId\": \"{{Creditor_MemberIdentification}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ofUrl}}function/off-transaction-monitoring-service{{TMSversion}}/transfer-response",
					"host": [
						"{{ofUrl}}function"
					],
					"path": [
						"off-transaction-monitoring-service{{TMSversion}}",
						"transfer-response"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orgnlInstrId",
			"value": ""
		},
		{
			"key": "orgnlEndToEndId",
			"value": ""
		},
		{
			"key": "transactionID",
			"value": ""
		},
		{
			"key": "EndToEndId",
			"value": ""
		},
		{
			"key": "ruleOrgnlInstrId",
			"value": ""
		},
		{
			"key": "ruleOrgnlEndToEndId",
			"value": ""
		},
		{
			"key": "graphKey1",
			"value": ""
		},
		{
			"key": "graphKey2",
			"value": ""
		},
		{
			"key": "shortGUID",
			"value": ""
		},
		{
			"key": "e2eID",
			"value": ""
		},
		{
			"key": "entityId036",
			"value": ""
		},
		{
			"key": "graphKey3",
			"value": ""
		},
		{
			"key": "entityId037",
			"value": ""
		},
		{
			"key": "graphKey4",
			"value": ""
		},
		{
			"key": "Creditor_Proprietary",
			"value": ""
		},
		{
			"key": "Creditor_Identification",
			"value": ""
		},
		{
			"key": "Creditor_MemberIdentification",
			"value": ""
		},
		{
			"key": "Debtor_Proprietary",
			"value": ""
		},
		{
			"key": "Debtor_Identification",
			"value": ""
		},
		{
			"key": "Debtor_MemberIdentification",
			"value": ""
		}
	]
}