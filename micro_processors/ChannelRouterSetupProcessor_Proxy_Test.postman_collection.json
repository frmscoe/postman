{
	"info": {
		"_postman_id": "c459af1c-bee4-4160-a7c1-93fe87c5b1d1",
		"name": "ChannelRouterSetupProcessor_Proxy_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27083427",
		"_collection_link": "https://red-space-860997.postman.co/workspace/frmscoe~d27a4005-57b9-4f72-88a8-6d14a92b11fd/collection/27083427-c459af1c-bee4-4160-a7c1-93fe87c5b1d1?action=share&source=collection_link&creator=27083427"
	},
	"item": [
		{
			"name": "ChannelRouterSetupProcessor_happypath",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"responseJSON = pm.response.json();\r",
							"\r",
							"let outgoingCRSPResult = responseJSON.data;\r",
							"let transaction = outgoingCRSPResult.transaction\r",
							"let networkMap = outgoingCRSPResult.networkMap\r",
							"let dataCache = outgoingCRSPResult.DataCache\r",
							"let metaData = outgoingCRSPResult.metaData;\r",
							"let prcgTm = outgoingCRSPResult.metaData.prcgTmCRSP;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Has a transaction object', function() {\r",
							"  pm.expect(outgoingCRSPResult).to.have.property('transaction');\r",
							"});\r",
							"\r",
							"pm.test('Has a networkMap object', function() {\r",
							"  pm.expect(outgoingCRSPResult).to.have.property('networkMap');\r",
							"});\r",
							"\r",
							"pm.test('Has a dataCache object', function() {\r",
							"  pm.expect(outgoingCRSPResult).to.have.property('DataCache');\r",
							"});\r",
							"\r",
							"pm.test('Has a metaData object', function() {\r",
							"  pm.expect(outgoingCRSPResult).to.have.property('metaData');\r",
							"});\r",
							"\r",
							"pm.test(`Processing time: ${(prcgTm/1000000).toFixed(3)} milliseconds`, function () {\r",
							"    pm.expect(prcgTm).to.be.greaterThan(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"utils.setPm(pm); // set the utils _pm to the pre-request script pm\r",
							"let moment = require('moment');\r",
							"// ## Set up rule config\r",
							"\r",
							"const requestDestination = `CRSP`;\r",
							"const responseDestination = `sub-rule-001@1.0.0`;\r",
							"\r",
							"pm.variables.set('$randomUUID', \"sadsafsa\");\r",
							"\r",
							"// ## Set up body variables\r",
							"\r",
							"let pacs002Body = pm.globals.get('pacs002');\r",
							"pm.variables.set('pacs002Body', pacs002Body);\r",
							"\r",
							"pm.variables.set('requestDestination', requestDestination);\r",
							"pm.variables.set('responseDestination', responseDestination);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"destination\": \"{{requestDestination}}\",\r\n    \"consumer\": \"{{responseDestination}}\",\r\n    \"functionName\": \"{{messageIdPacs002}}\",\r\n    \"message\": {\r\n        \"transaction\": {\r\n    \"TxTp\": \"pacs.002.001.12\",\r\n    \"FIToFIPmtSts\": {\r\n        \"GrpHdr\": {\r\n            \"MsgId\": \"{{$randomUUID}}\",\r\n            \"CreDtTm\": \"2021-11-03T07:24:48.000Z\"\r\n        },\r\n        \"TxInfAndSts\": {\r\n            \"OrgnlInstrId\": \"{{InstrId}}\",\r\n            \"OrgnlEndToEndId\": \"{{EndtoEnd}}\",\r\n            \"TxSts\": \"ACCC\",\r\n            \"ChrgsInf\": [\r\n                {\r\n                    \"Amt\": {\r\n                        \"Amt\": 157605510200862,\r\n                        \"Ccy\": \"USD\"\r\n                    },\r\n                    \"Agt\": {\r\n                        \"FinInstnId\": {\r\n                            \"ClrSysMmbId\": {\r\n                                \"MmbId\": \"dfsp001\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"Amt\": {\r\n                        \"Amt\": 15918156530287100,\r\n                        \"Ccy\": \"USD\"\r\n                    },\r\n                    \"Agt\": {\r\n                        \"FinInstnId\": {\r\n                            \"ClrSysMmbId\": {\r\n                                \"MmbId\": \"dfsp001\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"Amt\": {\r\n                        \"Amt\": 15918156530287100,\r\n                        \"Ccy\": \"USD\"\r\n                    },\r\n                    \"Agt\": {\r\n                        \"FinInstnId\": {\r\n                            \"ClrSysMmbId\": {\r\n                                \"MmbId\": \"dfsp002\"\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n            \"AccptncDtTm\": \"2021-11-03T07:24:47.000Z\",\r\n            \"InstgAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp001\"\r\n                    }\r\n                }\r\n            },\r\n            \"InstdAgt\": {\r\n                \"FinInstnId\": {\r\n                    \"ClrSysMmbId\": {\r\n                        \"MmbId\": \"dfsp002\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n},\r\n        \"networkMap\": {\r\n            \"name\": \"Step-by-step processor testing - rule output to mock API\",\r\n            \"active\": true,\r\n            \"cfg\": \"1.0.0\",\r\n            \"messages\": [\r\n                {\r\n                    \"id\": \"004@1.0.0\",\r\n                    \"host\": \"NATS Server\",\r\n                    \"cfg\": \"1.0.0\",\r\n                    \"txTp\": \"pacs.002.001.12\",\r\n                    \"channels\": [\r\n                        {\r\n                            \"id\": \"channel_i@1.0.0\",\r\n                            \"host\": \"NATS Server\",\r\n                            \"cfg\": \"1.0.0\",\r\n                            \"typologies\": [\r\n                                {\r\n                                    \"id\": \"000@1.0.0\",\r\n                                    \"host\": \"NATS Server\",\r\n                                    \"cfg\": \"1.0.0\",\r\n                                    \"rules\": [\r\n                                        {\r\n                                            \"id\": \"027@1.0.0\",\r\n                                            \"host\": \"RuleRequest027\",\r\n                                            \"cfg\": \"1.0.0\"\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"DataCache\": {\r\n            \"dbtrId\": \"dbtr_670e8acee31747f5a9740d3d040ff825\",\r\n            \"cdtrId\": \"cdtr_f8d5e54d3d5e44a5a4ff76973a824bf8\",\r\n            \"dbtrAcctId\": \"dbtrAcct_508e3c8c096d465c9fca4a08e6b62973\",\r\n            \"cdtrAcctId\": \"cdtrAcct_a53d0cbaed9e44eabba00f76fb642407\"\r\n        }   \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ofUrl}}/{{path-channel-router-setup-processor}}",
					"host": [
						"{{ofUrl}}"
					],
					"path": [
						"{{path-channel-router-setup-processor}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let _pm = null;",
					"",
					"utils = {",
					"    // https://community.postman.com/t/how-to-reuse-function-in-2022/39077/4",
					"    setPm: function (scriptPm) {",
					"        _pm = scriptPm;",
					"    },",
					"",
					"    // This function takes in a period parameter and returns the appropriate number of milliseconds",
					"    // Valid parameters are d, days; h, hours; m, minutes; s, seconds",
					"    // Example: WeekInMilliseconds = 7 * utils.timeframe('d');",
					"",
					"    timeframe: function (unit) {",
					"        switch (unit) {",
					"            case 'd':",
					"            case 'days':",
					"                milliseconds = 86400000;",
					"                break;",
					"            case 'h':",
					"            case 'hours':",
					"                milliseconds = 3600000;",
					"                break;",
					"            case 'm':",
					"            case 'minutes':",
					"                milliseconds = 60000;",
					"                break;",
					"            case 's':",
					"            case 'seconds':",
					"                milliseconds = 1000;",
					"                break;",
					"            default: milliseconds = 0;",
					"        }",
					"        return milliseconds;",
					"    },",
					"",
					"    // This function creates a UUID without '-' to meet ISO20022 char(35) restrictions on keys",
					"    // Example: accountId = 7 * utils.createISOUUID();",
					"",
					"    createISOUUID: function () {",
					"        let uuid = require('uuid');",
					"        return uuid.v4().replace(/-/g, '');",
					"    },",
					"",
					"    pauseForQueryResponse: function (setTimeoutFunc, time) {",
					"        _pm.test(\"In pauseForQueryResponse()\");",
					"        const moment = require(\"moment\");",
					"        let startMoment = moment();",
					"        setTimeoutFunc(function () {",
					"            let diffDuration = startMoment.diff(moment());",
					"            _pm.test(\"pauseForQueryResponse() - paused for \" + diffDuration.milliseconds() + \" milliseconds\");",
					"        }, time);",
					"    },",
					"",
					"    deleteRuleConfig: async function (ruleId, ruleConfigVersion) {",
					"",
					"        const queryString = `FOR cfg IN configuration",
					"        FILTER cfg.id == '${ruleId}'",
					"        AND cfg.cfg == '${ruleConfigVersion}'",
					"        REMOVE cfg._key IN configuration`;",
					"",
					"        const configPostRequest = {",
					"            url: `${_pm.environment.get('arangoUrl')}/_db/${_pm.environment.get('db_config_all')}/_api/cursor`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    query: queryString",
					"                })",
					"            }",
					"        };",
					"",
					"        await _pm.sendRequest(configPostRequest, (error, response) => {",
					"            console.log(error ? error : response.json());",
					"        });",
					"    },",
					"",
					"    createRuleConfig: async function (ruleConfig) {",
					"",
					"        const configPostRequest = {",
					"            url: `${_pm.environment.get('arangoUrl')}/_db/${_pm.environment.get('db_config_all')}/_api/document/${_pm.environment.get('db_config_rules')}?overwrite=true`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(ruleConfig)",
					"            },",
					"        };",
					"",
					"        await _pm.sendRequest(configPostRequest, (error, response) => {",
					"            console.log(error ? error : response.json());",
					"        });",
					"    },",
					"",
					"    recreateRuleConfig: async function (ruleId, ruleConfigVersion, ruleConfig) {",
					"",
					"        const queryString = `FOR cfg IN configuration",
					"        FILTER cfg.id == '${ruleId}'",
					"        AND cfg.cfg == '${ruleConfigVersion}'",
					"        REMOVE cfg._key IN configuration`;",
					"",
					"        const configPostRequest = {",
					"            url: `${_pm.environment.get('arangoUrl')}/_db/${_pm.environment.get('db_config_all')}/_api/cursor`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    query: queryString",
					"                })",
					"            }",
					"        };",
					"",
					"        await _pm.sendRequest(configPostRequest, (error, response) => {",
					"            console.log(error ? error : response.json());",
					"            utils.createRuleConfig(ruleConfig);",
					"        });",
					"    },",
					"",
					"    prepPain001Msg: function (messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorAccountId, endToEndId, transactionPurpose, amount, creditorId, creditorAccountId, transactionDescription, transactionLat, transactionLong) {",
					"        return {",
					"            \"TxTp\": \"pain.001.001.11\",",
					"            \"CstmrCdtTrfInitn\": {",
					"                \"GrpHdr\": {",
					"                    \"MsgId\": `${messageIdPain001}`,",
					"                    \"CreDtTm\": `${timestampPain001}`,",
					"                    \"NbOfTxs\": 1,",
					"                    \"InitgPty\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": \"1968-02-01\",",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": {",
					"                                    \"Id\": \"+27730975224\",",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"MSISDN\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    }",
					"                },",
					"                \"PmtInf\": {",
					"                    \"PmtInfId\": \"5ab4fc7355de4ef8a75b78b00a681ed2\",",
					"                    \"PmtMtd\": \"TRA\",",
					"                    \"ReqdAdvcTp\": {",
					"                        \"DbtAdvc\": {",
					"                            \"Cd\": \"ADWD\",",
					"                            \"Prtry\": \"Advice with transaction details\"",
					"                        }",
					"                    },",
					"                    \"ReqdExctnDt\": {",
					"                        \"Dt\": \"2023-06-02\",",
					"                        \"DtTm\": \"2023-06-02T07:50:57.000Z\"",
					"                    },",
					"                    \"Dbtr\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": `${debtorDoB}`,",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": {",
					"                                    \"Id\": `${debtorId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"ACTIO_EID\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    },",
					"                    \"DbtrAcct\": {",
					"                        \"Id\": {",
					"                            \"Othr\": {",
					"                                \"Id\": `${debtorAccountId}`,",
					"                                \"SchmeNm\": {",
					"                                    \"Prtry\": \"MSISDN\"",
					"                                }",
					"                            }",
					"                        },",
					"                        \"Nm\": \"April Grant\"",
					"                    },",
					"                    \"DbtrAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": \"dfsp001\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"CdtTrfTxInf\": {",
					"                        \"PmtId\": {",
					"                            \"EndToEndId\": `${endToEndId}`",
					"                        },",
					"                        \"PmtTpInf\": {",
					"                            \"CtgyPurp\": {",
					"                                \"Prtry\": `${transactionPurpose}`",
					"                            }",
					"                        },",
					"                        \"Amt\": {",
					"                            \"InstdAmt\": {",
					"                                \"Amt\": {",
					"                                    \"Amt\": amount,",
					"                                    \"Ccy\": \"USD\"",
					"                                }",
					"                            },",
					"                            \"EqvtAmt\": {",
					"                                \"Amt\": {",
					"                                    \"Amt\": amount,",
					"                                    \"Ccy\": \"USD\"",
					"                                },",
					"                                \"CcyOfTrf\": \"USD\"",
					"                            }",
					"                        },",
					"                        \"ChrgBr\": \"DEBT\",",
					"                        \"CdtrAgt\": {",
					"                            \"FinInstnId\": {",
					"                                \"ClrSysMmbId\": {",
					"                                    \"MmbId\": \"dfsp002\"",
					"                                }",
					"                            }",
					"                        },",
					"                        \"Cdtr\": {",
					"                            \"Nm\": \"Felicia Easton Quill\",",
					"                            \"Id\": {",
					"                                \"PrvtId\": {",
					"                                    \"DtAndPlcOfBirth\": {",
					"                                        \"BirthDt\": \"1935-05-08\",",
					"                                        \"CityOfBirth\": \"Unknown\",",
					"                                        \"CtryOfBirth\": \"ZZ\"",
					"                                    },",
					"                                    \"Othr\": {",
					"                                        \"Id\": `${creditorId}`,",
					"                                        \"SchmeNm\": {",
					"                                            \"Prtry\": \"ACTIO_EID\"",
					"                                        }",
					"                                    }",
					"                                }",
					"                            },",
					"                            \"CtctDtls\": {",
					"                                \"MobNb\": \"+27-707650428\"",
					"                            }",
					"                        },",
					"                        \"CdtrAcct\": {",
					"                            \"Id\": {",
					"                                \"Othr\": {",
					"                                    \"Id\": `${creditorAccountId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"MSISDN\"",
					"                                    }",
					"                                }",
					"                            },",
					"                            \"Nm\": \"Felicia Quill\"",
					"                        },",
					"                        \"Purp\": {",
					"                            \"Cd\": \"MP2P\"",
					"                        },",
					"                        \"RgltryRptg\": {",
					"                            \"Dtls\": {",
					"                                \"Tp\": \"BALANCE OF PAYMENTS\",",
					"                                \"Cd\": \"100\"",
					"                            }",
					"                        },",
					"                        \"RmtInf\": {",
					"                            \"Ustrd\": `${transactionDescription}`",
					"                        },",
					"                        \"SplmtryData\": {",
					"                            \"Envlp\": {",
					"                                \"Doc\": {",
					"                                    \"Dbtr\": {",
					"                                        \"FrstNm\": \"April\",",
					"                                        \"MddlNm\": \"Blake\",",
					"                                        \"LastNm\": \"Grant\",",
					"                                        \"MrchntClssfctnCd\": \"BLANK\"",
					"                                    },",
					"                                    \"Cdtr\": {",
					"                                        \"FrstNm\": \"Felicia\",",
					"                                        \"MddlNm\": \"Easton\",",
					"                                        \"LastNm\": \"Quill\",",
					"                                        \"MrchntClssfctnCd\": \"BLANK\"",
					"                                    },",
					"                                    \"DbtrFinSvcsPrvdrFees\": {",
					"                                        \"Ccy\": \"USD\",",
					"                                        \"Amt\": 0.00",
					"                                    },",
					"                                    \"Xprtn\": \"2021-11-30T10:38:56.000Z\"",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                },",
					"                \"SplmtryData\": {",
					"                    \"Envlp\": {",
					"                        \"Doc\": {",
					"                            \"InitgPty\": {",
					"                                \"InitrTp\": \"CONSUMER\",",
					"                                \"Glctn\": {",
					"                                    \"Lat\": `${transactionLat}`,",
					"                                    \"Long\": `${transactionLong}`",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    },",
					"",
					"    prepPain013Msg: function (messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorAccountId, endToEndId, amount, creditorId, creditorAccountId, transactionLat, transactionLong) {",
					"        return {",
					"            \"TxTp\": \"pain.013.001.09\",",
					"            \"CdtrPmtActvtnReq\": {",
					"                \"GrpHdr\": {",
					"                    \"MsgId\": `${messageIdPain013}`,",
					"                    \"CreDtTm\": `${timestampPain013}`,",
					"                    \"NbOfTxs\": 1,",
					"                    \"InitgPty\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": \"1968-02-01\",",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": {",
					"                                    \"Id\": \"+27730975224\",",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"MSISDN\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    }",
					"                },",
					"                \"PmtInf\": {",
					"                    \"PmtInfId\": \"5ab4fc7355de4ef8a75b78b00a681ed2\",",
					"                    \"PmtMtd\": \"TRA\",",
					"                    \"ReqdAdvcTp\": {",
					"                        \"DbtAdvc\": {",
					"                            \"Cd\": \"ADWD\",",
					"                            \"Prtry\": \"Advice with transaction details\"",
					"                        }",
					"                    },",
					"                    \"ReqdExctnDt\": {",
					"                        \"DtTm\": \"2023-06-02T07:51:48.000Z\"",
					"                    },",
					"                    \"XpryDt\": {",
					"                        \"DtTm\": \"2021-11-30T10:38:56.000Z\"",
					"                    },",
					"                    \"Dbtr\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": `${debtorDoB}`,",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": {",
					"                                    \"Id\": `${debtorId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"ACTIO_EID\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    },",
					"                    \"DbtrAcct\": {",
					"                        \"Id\": {",
					"                            \"Othr\": {",
					"                                \"Id\": `${debtorAccountId}`,",
					"                                \"SchmeNm\": {",
					"                                    \"Prtry\": \"MSISDN\"",
					"                                }",
					"                            }",
					"                        },",
					"                        \"Nm\": \"April Grant\"",
					"                    },",
					"                    \"DbtrAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": \"dfsp001\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"CdtTrfTxInf\": {",
					"                        \"PmtId\": {",
					"                            \"EndToEndId\": `${endToEndId}`",
					"                        },",
					"                        \"PmtTpInf\": {",
					"                            \"CtgyPurp\": {",
					"                                \"Prtry\": \"TRANSFER BLANK\"",
					"                            }",
					"                        },",
					"                        \"Amt\": {",
					"                            \"InstdAmt\": {",
					"                                \"Amt\": {",
					"                                    \"Amt\": amount,",
					"                                    \"Ccy\": \"USD\"",
					"                                }",
					"                            },",
					"                            \"EqvtAmt\": {",
					"                                \"Amt\": {",
					"                                    \"Amt\": amount,",
					"                                    \"Ccy\": \"USD\"",
					"                                },",
					"                                \"CcyOfTrf\": \"USD\"",
					"                            }",
					"                        },",
					"                        \"ChrgBr\": \"DEBT\",",
					"                        \"CdtrAgt\": {",
					"                            \"FinInstnId\": {",
					"                                \"ClrSysMmbId\": {",
					"                                    \"MmbId\": \"dfsp002\"",
					"                                }",
					"                            }",
					"                        },",
					"                        \"Cdtr\": {",
					"                            \"Nm\": \"Felicia Easton Quill\",",
					"                            \"Id\": {",
					"                                \"PrvtId\": {",
					"                                    \"DtAndPlcOfBirth\": {",
					"                                        \"BirthDt\": \"1935-05-08\",",
					"                                        \"CityOfBirth\": \"Unknown\",",
					"                                        \"CtryOfBirth\": \"ZZ\"",
					"                                    },",
					"                                    \"Othr\": {",
					"                                        \"Id\": `${creditorId}`,",
					"                                        \"SchmeNm\": {",
					"                                            \"Prtry\": \"ACTIO_EID\"",
					"                                        }",
					"                                    }",
					"                                }",
					"                            },",
					"                            \"CtctDtls\": {",
					"                                \"MobNb\": \"+27-707650428\"",
					"                            }",
					"                        },",
					"                        \"CdtrAcct\": {",
					"                            \"Id\": {",
					"                                \"Othr\": {",
					"                                    \"Id\": `${creditorAccountId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"MSISDN\"",
					"                                    }",
					"                                }",
					"                            },",
					"                            \"Nm\": \"Felicia Quill\"",
					"                        },",
					"                        \"Purp\": {",
					"                            \"Cd\": \"MP2P\"",
					"                        },",
					"                        \"RgltryRptg\": {",
					"                            \"Dtls\": {",
					"                                \"Tp\": \"BALANCE OF PAYMENTS\",",
					"                                \"Cd\": \"100\"",
					"                            }",
					"                        },",
					"                        \"SplmtryData\": {",
					"                            \"Envlp\": {",
					"                                \"Doc\": {",
					"                                    \"PyeeRcvAmt\": {",
					"                                        \"Amt\": {",
					"                                            \"Amt\": 0.00,",
					"                                            \"Ccy\": \"USD\"",
					"                                        }",
					"                                    },",
					"                                    \"PyeeFinSvcsPrvdrFee\": {",
					"                                        \"Amt\": {",
					"                                            \"Amt\": 0.00,",
					"                                            \"Ccy\": \"USD\"",
					"                                        }",
					"                                    },",
					"                                    \"PyeeFinSvcsPrvdrComssn\": {",
					"                                        \"Amt\": {",
					"                                            \"Amt\": 0.00,",
					"                                            \"Ccy\": \"USD\"",
					"                                        }",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                },",
					"                \"SplmtryData\": {",
					"                    \"Envlp\": {",
					"                        \"Doc\": {",
					"                            \"InitgPty\": {",
					"                                \"Glctn\": {",
					"                                    \"Lat\": `${transactionLat}`,",
					"                                    \"Long\": `${transactionLong}`",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    },",
					"",
					"    prepPacs008Msg: function (messageIdPacs008, timestampPacs008, endToEndId, amount, debtorDoB, debtorId, debtorAccountId, creditorId, creditorAccountId, transactionPurpose, transactionDescription, transactionLat, transactionLong) {",
					"        return {",
					"            \"TxTp\": \"pacs.008.001.10\",",
					"            \"FIToFICstmrCdt\": {",
					"                \"GrpHdr\": {",
					"                    \"MsgId\": `${messageIdPacs008}`,",
					"                    \"CreDtTm\": `${timestampPacs008}`,",
					"                    \"NbOfTxs\": 1,",
					"                    \"SttlmInf\": {",
					"                        \"SttlmMtd\": \"CLRG\"",
					"                    }",
					"                },",
					"                \"CdtTrfTxInf\": {",
					"                    \"PmtId\": {",
					"                        \"InstrId\": \"5ab4fc7355de4ef8a75b78b00a681ed2\",",
					"                        \"EndToEndId\": `${endToEndId}`",
					"                    },",
					"                    \"IntrBkSttlmAmt\": {",
					"                        \"Amt\": {",
					"                            \"Amt\": amount,",
					"                            \"Ccy\": \"USD\"",
					"                        }",
					"                    },",
					"                    \"InstdAmt\": {",
					"                        \"Amt\": {",
					"                            \"Amt\": amount,",
					"                            \"Ccy\": \"USD\"",
					"                        }",
					"                    },",
					"                    \"ChrgBr\": \"DEBT\",",
					"                    \"ChrgsInf\": {",
					"                        \"Amt\": {",
					"                            \"Amt\": 0.00,",
					"                            \"Ccy\": \"USD\"",
					"                        },",
					"                        \"Agt\": {",
					"                            \"FinInstnId\": {",
					"                                \"ClrSysMmbId\": {",
					"                                    \"MmbId\": \"dfsp001\"",
					"                                }",
					"                            }",
					"                        }",
					"                    },",
					"                    \"InitgPty\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": \"1968-02-01\",",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": {",
					"                                    \"Id\": \"+27730975224\",",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"MSISDN\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    },",
					"                    \"Dbtr\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": `${debtorDoB}`,",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": {",
					"                                    \"Id\": `${debtorId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"ACTIO_EID\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    },",
					"                    \"DbtrAcct\": {",
					"                        \"Id\": {",
					"                            \"Othr\": {",
					"                                \"Id\": `${debtorAccountId}`,",
					"                                \"SchmeNm\": {",
					"                                    \"Prtry\": \"MSISDN\"",
					"                                }",
					"                            }",
					"                        },",
					"                        \"Nm\": \"April Grant\"",
					"                    },",
					"                    \"DbtrAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": \"dfsp001\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"CdtrAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": \"dfsp002\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"Cdtr\": {",
					"                        \"Nm\": \"Felicia Easton Quill\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": \"1935-05-08\",",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": {",
					"                                    \"Id\": `${creditorId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": \"ACTIO_EID\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-707650428\"",
					"                        }",
					"                    },",
					"                    \"CdtrAcct\": {",
					"                        \"Id\": {",
					"                            \"Othr\": {",
					"                                \"Id\": `${creditorAccountId}`,",
					"                                \"SchmeNm\": {",
					"                                    \"Prtry\": \"MSISDN\"",
					"                                }",
					"                            }",
					"                        },",
					"                        \"Nm\": \"Felicia Quill\"",
					"                    },",
					"                    \"Purp\": {",
					"                        \"Cd\": `${transactionPurpose}`",
					"                    }",
					"                },",
					"                \"RgltryRptg\": {",
					"                    \"Dtls\": {",
					"                        \"Tp\": \"BALANCE OF PAYMENTS\",",
					"                        \"Cd\": \"100\"",
					"                    }",
					"                },",
					"                \"RmtInf\": {",
					"                    \"Ustrd\": `${transactionDescription}`",
					"                },",
					"                \"SplmtryData\": {",
					"                    \"Envlp\": {",
					"                        \"Doc\": {",
					"                            \"Xprtn\": \"2021-11-30T10:38:56.000Z\",",
					"                            \"InitgPty\": {",
					"                                \"Glctn\":",
					"                                {",
					"                                    \"Lat\": `${transactionLat}`,",
					"                                    \"Long\": `${transactionLong}`",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    },",
					"",
					"    prepPacs002Msg: function (messageIdPacs002, timestampPacs002, endToEndId, pacs002StStS) {",
					"        return {",
					"            \"TxTp\": \"pacs.002.001.12\",",
					"            \"FIToFIPmtSts\": {",
					"                \"GrpHdr\": {",
					"                    \"MsgId\": `${messageIdPacs002}`,",
					"                    \"CreDtTm\": `${timestampPacs002}`,",
					"                },",
					"                \"TxInfAndSts\": {",
					"                    \"OrgnlInstrId\": \"5ab4fc7355de4ef8a75b78b00a681ed2\",",
					"                    \"OrgnlEndToEndId\": `${endToEndId}`,",
					"                    \"TxSts\": `${pacs002StStS}`,",
					"                    \"ChrgsInf\": [",
					"                        {",
					"                            \"Amt\": {",
					"                                \"Amt\": 0.00,",
					"                                \"Ccy\": \"USD\"",
					"                            },",
					"                            \"Agt\": {",
					"                                \"FinInstnId\": {",
					"                                    \"ClrSysMmbId\": {",
					"                                        \"MmbId\": \"dfsp001\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        {",
					"                            \"Amt\": {",
					"                                \"Amt\": 0.00,",
					"                                \"Ccy\": \"USD\"",
					"                            },",
					"                            \"Agt\": {",
					"                                \"FinInstnId\": {",
					"                                    \"ClrSysMmbId\": {",
					"                                        \"MmbId\": \"dfsp001\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        {",
					"                            \"Amt\": {",
					"                                \"Amt\": 0.00,",
					"                                \"Ccy\": \"USD\"",
					"                            },",
					"                            \"Agt\": {",
					"                                \"FinInstnId\": {",
					"                                    \"ClrSysMmbId\": {",
					"                                        \"MmbId\": \"dfsp002\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    ],",
					"                    \"AccptncDtTm\": \"2023-06-02T07:52:31.000Z\",",
					"                    \"InstgAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": \"dfsp001\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"InstdAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": \"dfsp002\"",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    },",
					"",
					"    prepGraphEntities: function (debtorId, creditorId, timestamp) {",
					"        return [{",
					"            \"_key\": `${debtorId}`,",
					"            \"Id\": `${debtorId}`,",
					"            \"CreDtTm\": `${timestamp}`",
					"        }, {",
					"            \"_key\": `${creditorId}`,",
					"            \"Id\": `${creditorId}`,",
					"            \"CreDtTm\": `${timestamp}`",
					"        }]",
					"    },",
					"",
					"    prepGraphAccountHolders: function (entitiesPrefix, accountsPrefix, debtorId, debtorAccountId, creditorId, creditorAccountId, timestamp) {",
					"        return [{",
					"            \"_key\": `${debtorId}` + `${debtorAccountId}`,",
					"            \"_from\": `${entitiesPrefix}` + `${debtorId}`,",
					"            \"_to\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"            \"CreDtTm\": `${timestamp}`",
					"        },",
					"        {",
					"            \"_key\": `${creditorId}` + `${creditorAccountId}`,",
					"            \"_from\": `${entitiesPrefix}` + `${creditorId}`,",
					"            \"_to\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"            \"CreDtTm\": `${timestamp}`",
					"        }]",
					"    },",
					"",
					"    prepGraphAccounts: function (debtorAccountId, creditorAccountId) {",
					"        return [{",
					"            \"_key\": debtorAccountId,",
					"        }, {",
					"            \"_key\": creditorAccountId,",
					"        }]",
					"    },",
					"",
					"    prepGraphTransactions: function (accountsPrefix, debtorAccountId, creditorAccountId, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002StStS, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013) {",
					"",
					"        var transactions = [];",
					"",
					"        if (typeof timestampPain001 !== \"undefined\") {",
					"            transactions.push({",
					"                \"_from\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                \"_to\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                \"TxTp\": \"pain.001.001.11\",",
					"                \"CreDtTm\": `${timestampPain001}`,",
					"                \"Amt\": amount,",
					"                \"Ccy\": \"USD\",",
					"                \"PmtInfId\": `${messageIdPain001}`,",
					"                \"EndToEndId\": `${endToEndId}`",
					"            });",
					"            transactions.push({",
					"                \"_from\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                \"_to\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                \"TxTp\": \"pain.013.001.09\",",
					"                \"CreDtTm\": `${timestampPain013}`,",
					"                \"Amt\": amount,",
					"                \"Ccy\": \"USD\",",
					"                \"PmtInfId\": `${messageIdPain013}`,",
					"                \"EndToEndId\": `${endToEndId}`",
					"            });",
					"        }",
					"",
					"        transactions.push({",
					"            \"_from\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"            \"_to\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"            \"TxTp\": \"pacs.008.001.10\",",
					"            \"CreDtTm\": `${timestampPacs008}`,",
					"            \"Amt\": amount,",
					"            \"Ccy\": \"USD\",",
					"            \"PmtInfId\": `${messageIdPacs008}`,",
					"            \"EndToEndId\": `${endToEndId}`",
					"        });",
					"",
					"        if (typeof timestampPacs002 !== \"undefined\") {",
					"            transactions.push({",
					"                \"_from\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                \"_to\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                \"TxTp\": \"pacs.002.001.12\",",
					"                \"TxSts\": `${pacs002StStS}`,",
					"                \"CreDtTm\": `${timestampPacs002}`,",
					"                \"PmtInfId\": `${messageIdPacs002}`,",
					"                \"EndToEndId\": `${endToEndId}`",
					"            });",
					"        }",
					"",
					"        return transactions",
					"    },",
					"",
					"    /* parameters:",
					"        timestampEpoch ( = 0 )",
					"        amount ( = random up to 1000.00 )",
					"        transactionDescription ( = 'Generic payment description' )",
					"        pacs002StStS ( = 'ACCC' )",
					"        debtorAge ( = 25 )",
					"        transactionPurpose ( = 'TRANSFER' )",
					"        transactionLat ( = -3.1609 )",
					"        transactionLong ( = 38.3588 )",
					"    */",
					"",
					"    createNewTransactionSet: function (timestampEpoch, amount, transactionDescription, pacs002StStS, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        let uuid = require('uuid');",
					"",
					"        const activePain001 = JSON.parse(pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_messagehistory = _pm.environment.get('db_messagehistory');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_transactions = _pm.environment.get('db_coll_graph_transactions');",
					"        const db_coll_graph_entities = _pm.environment.get('db_coll_graph_entities');",
					"        const db_coll_graph_accounts = _pm.environment.get('db_coll_graph_accounts');",
					"        const db_coll_graph_account_holders = _pm.environment.get('db_coll_graph_account_holders');",
					"",
					"        var db_coll_msg_transactionHistoryPain001;",
					"        var db_coll_msg_transactionHistoryPain013;",
					"        if (activePain001) {",
					"            db_coll_msg_transactionHistoryPain001 = _pm.environment.get('db_coll_msg_transactionHistoryPain001');",
					"            db_coll_msg_transactionHistoryPain013 = _pm.environment.get('db_coll_msg_transactionHistoryPain013');",
					"        }",
					"        const db_coll_msg_transactionHistoryPacs008 = _pm.environment.get('db_coll_msg_transactionHistoryPacs008');",
					"        const db_coll_msg_transactionHistoryPacs002 = _pm.environment.get('db_coll_msg_transactionHistoryPacs002');",
					"        const accountsPrefix = 'accounts/';",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002StStS = pacs002StStS ? pacs002StStS : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = 'dbtr_' + uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = 'dbtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let creditorId = 'cdtr_' + uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = 'cdtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        console.log(\"pacs.002 payload timestamp: \" + timestampPacs002);",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"        var pain001;",
					"        var pain013;",
					"",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"            pain001 = [utils.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorAccountId, endToEndId, transactionPurpose, amount, creditorId, creditorAccountId, transactionDescription, transactionLat, transactionLong)];",
					"",
					"            pain013 = [utils.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorAccountId, endToEndId, amount, creditorId, creditorAccountId, transactionLat, transactionLong)];",
					"        }",
					"",
					"        const pacs008 = [utils.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, amount, debtorDoB, debtorId, debtorAccountId, creditorId, creditorAccountId, transactionPurpose, transactionDescription, transactionLat, transactionLong)];",
					"",
					"        const pacs002 = [utils.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002StStS)];",
					"",
					"        const pacs002TriggerPayload = pacs002;",
					"",
					"        const dataCache = [{",
					"            \"dbtrId\": `${debtorId}`,",
					"            \"cdtrId\": `${creditorId}`,",
					"            \"dbtrAcctId\": `${debtorAccountId}`,",
					"            \"cdtrAcctId\": `${creditorAccountId}`",
					"        }]",
					"",
					"        const accounts = utils.prepGraphAccounts(debtorAccountId, creditorAccountId);",
					"",
					"        var postRequests = [];",
					"        var account_holders = [];",
					"        var entities = [];",
					"        var transactions = [];",
					"",
					"        if (activePain001) {",
					"            entities = utils.prepGraphEntities(debtorId, creditorId, timestampPain001);",
					"            account_holders = utils.prepGraphAccountHolders(entitiesPrefix, accountsPrefix, debtorId, debtorAccountId, creditorId, creditorAccountId, timestampPain001);",
					"            transactions = utils.prepGraphTransactions(accountsPrefix, debtorAccountId, creditorAccountId, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002StStS, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013);",
					"",
					"            postRequests = [{",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain001}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pain001)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain013}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pain013)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs008)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs002)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(accounts)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(entities)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(transactions)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(account_holders)",
					"                }",
					"            }];",
					"        } else {",
					"            entities = utils.prepGraphEntities(debtorId, creditorId, timestampPacs008);",
					"            account_holders = utils.prepGraphAccountHolders(entitiesPrefix, accountsPrefix, debtorId, debtorAccountId, creditorId, creditorAccountId, timestampPacs008);",
					"            transactions = utils.prepGraphTransactions(accountsPrefix, debtorAccountId, creditorAccountId, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002StStS);",
					"",
					"            postRequests = [{",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs008)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs002)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(accounts)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(entities)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(transactions)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(account_holders)",
					"                }",
					"            }];",
					"            console.log(postRequests);",
					"        }",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"",
					"        console.log('pacs.002 trigger payload: ' + JSON.stringify(pacs002TriggerPayload[0]));",
					"",
					"        _pm.globals.set(\"pacs002\", JSON.stringify(pacs002TriggerPayload[0]));",
					"        _pm.globals.set(\"dataCache\", JSON.stringify(dataCache[0]));",
					"        _pm.globals.set('debtorId', debtorId);",
					"        _pm.globals.set('debtorAccountId', debtorAccountId);",
					"        _pm.globals.set('debtorDoB', debtorDoB);",
					"        _pm.globals.set('creditorId', creditorId);",
					"        _pm.globals.set('creditorAccountId', creditorAccountId);",
					"        _pm.globals.set('timestampPacs008', timestampPacs008);",
					"        _pm.globals.set('timestampPacs002', timestampPacs002);",
					"        _pm.globals.set('endToEndId', endToEndId);",
					"        _pm.globals.set('pacs002StStS', pacs002StStS);",
					"        _pm.globals.set('amount', amount);",
					"        _pm.globals.set('transactionDescription', transactionDescription);",
					"        _pm.globals.set('transactionPurpose', transactionPurpose);",
					"        _pm.globals.set('transactionLat', transactionLat);",
					"        _pm.globals.set('transactionLong', transactionLong);",
					"        _pm.globals.set('messageIdPacs008', messageIdPacs008);",
					"        _pm.globals.set('messageIdPacs002', messageIdPacs002);",
					"        if (activePain001) {",
					"            _pm.globals.set('timestampPain001', timestampPain001);",
					"            _pm.globals.set('timestampPain013', timestampPain013);",
					"            _pm.globals.set('messageIdPain001', messageIdPain001);",
					"            _pm.globals.set('messageIdPain013', messageIdPain013);",
					"        }",
					"",
					"        console.log(`\"DataCache\": {",
					"            \"dbtrId\": \"entities/${_pm.globals.get(\"debtorId\")}\",",
					"            \"cdtrId\": \"entities/${_pm.globals.get(\"creditorId\")}\",",
					"            \"dbtrAcctId\": \"accounts/${_pm.globals.get(\"debtorAccountId\")}\",",
					"            \"cdtrAcctId\": \"accounts/${_pm.globals.get(\"creditorAccountId\")}\"",
					"        }`);",
					"        console.log('endToEndId: ' + _pm.globals.get(\"endToEndId\"));",
					"    },",
					"",
					"    createNewTransactionSetWithoutPacs002: function (timestampEpoch, amount, transactionDescription, pacs002StStS, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        let uuid = require('uuid');",
					"",
					"        const activePain001 = JSON.parse(pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_messagehistory = _pm.environment.get('db_messagehistory');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_transactions = _pm.environment.get('db_coll_graph_transactions');",
					"        const db_coll_graph_entities = _pm.environment.get('db_coll_graph_entities');",
					"        const db_coll_graph_accounts = _pm.environment.get('db_coll_graph_accounts');",
					"        const db_coll_graph_account_holders = _pm.environment.get('db_coll_graph_account_holders');",
					"        const db_coll_msg_transactionHistoryPacs008 = _pm.environment.get('db_coll_msg_transactionHistoryPacs008');",
					"        const db_coll_msg_transactionHistoryPacs002 = _pm.environment.get('db_coll_msg_transactionHistoryPacs002');",
					"        const accountsPrefix = 'accounts/';",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002StStS = pacs002StStS ? pacs002StStS : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = 'dbtr_' + uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = 'dbtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let creditorId = 'cdtr_' + uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = 'cdtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        console.log(\"pacs.002 payload timestamp: \" + timestampPacs002);",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"",
					"        var db_coll_msg_transactionHistoryPain001;",
					"        var db_coll_msg_transactionHistoryPain013;",
					"",
					"        var pain001;",
					"        var pain013;",
					"",
					"        if (activePain001) {",
					"            db_coll_msg_transactionHistoryPain001 = _pm.environment.get('db_coll_msg_transactionHistoryPain001');",
					"            db_coll_msg_transactionHistoryPain013 = _pm.environment.get('db_coll_msg_transactionHistoryPain013');",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"            pain001 = [utils.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorAccountId, endToEndId, transactionPurpose, amount, creditorId, creditorAccountId, transactionDescription, transactionLat, transactionLong)];",
					"",
					"            pain013 = [utils.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorAccountId, endToEndId, amount, creditorId, creditorAccountId, transactionLat, transactionLong)];",
					"        }",
					"",
					"        const pacs008 = [utils.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, amount, debtorDoB, debtorId, debtorAccountId, creditorId, creditorAccountId, transactionPurpose, transactionDescription, transactionLat, transactionLong)];",
					"",
					"        const pacs002 = [utils.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002StStS)];",
					"",
					"        const pacs002TriggerPayload = pacs002;",
					"",
					"        const dataCache = [{",
					"            \"dbtrId\": `${debtorId}`,",
					"            \"cdtrId\": `${creditorId}`,",
					"            \"dbtrAcctId\": `${debtorAccountId}`,",
					"            \"cdtrAcctId\": `${creditorAccountId}`",
					"        }]",
					"",
					"        const accounts = utils.prepGraphAccounts(debtorAccountId, creditorAccountId);",
					"",
					"        var postRequests = [];",
					"        var account_holders = [];",
					"        var entities = [];",
					"        var transactions = [];",
					"",
					"        if (activePain001) {",
					"            entities = utils.prepGraphEntities(debtorId, creditorId, timestampPain001);",
					"            account_holders = utils.prepGraphAccountHolders(entitiesPrefix, accountsPrefix, debtorId, debtorAccountId, creditorId, creditorAccountId, timestampPain001);",
					"            transactions = utils.prepGraphTransactions(accountsPrefix, debtorAccountId, creditorAccountId, amount, endToEndId, timestampPacs008, messageIdPacs008, undefined, undefined, undefined, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013);",
					"",
					"            postRequests = [{",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain001}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pain001)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain013}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pain013)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs008)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(accounts)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(entities)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(transactions)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(account_holders)",
					"                }",
					"            }];",
					"        } else {",
					"            entities = utils.prepGraphEntities(debtorId, creditorId, timestampPacs008);",
					"            account_holders = utils.prepGraphAccountHolders(entitiesPrefix, accountsPrefix, debtorId, debtorAccountId, creditorId, creditorAccountId, timestampPacs008);",
					"            transactions = utils.prepGraphTransactions(accountsPrefix, debtorAccountId, creditorAccountId, amount, endToEndId, timestampPacs008, messageIdPacs008);",
					"",
					"            postRequests = [{",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs008)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(accounts)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(entities)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(transactions)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(account_holders)",
					"                }",
					"            }];",
					"        }",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"",
					"        console.log('pacs.002 trigger payload for Data Preparation: ' + JSON.stringify(pacs002TriggerPayload[0]));",
					"",
					"        _pm.globals.set(\"pacs002DataPrep\", JSON.stringify(pacs002TriggerPayload[0]));",
					"        _pm.globals.set(\"dataCache\", JSON.stringify(dataCache[0]));",
					"        _pm.globals.set('debtorId', debtorId);",
					"        _pm.globals.set('debtorAccountId', debtorAccountId);",
					"        _pm.globals.set('debtorDoB', debtorDoB);",
					"        _pm.globals.set('creditorId', creditorId);",
					"        _pm.globals.set('creditorAccountId', creditorAccountId);",
					"        _pm.globals.set('timestampPacs008', timestampPacs008);",
					"        _pm.globals.set('timestampPacs002', timestampPacs002);",
					"        _pm.globals.set('endToEndId', endToEndId);",
					"        _pm.globals.set('pacs002StStS', pacs002StStS);",
					"        _pm.globals.set('amount', amount);",
					"        _pm.globals.set('transactionDescription', transactionDescription);",
					"        _pm.globals.set('transactionPurpose', transactionPurpose);",
					"        _pm.globals.set('transactionLat', transactionLat);",
					"        _pm.globals.set('transactionLong', transactionLong);",
					"        _pm.globals.set('messageIdPacs008', messageIdPacs008);",
					"        _pm.globals.set('messageIdPacs002', messageIdPacs002);",
					"        if (activePain001) {",
					"            _pm.globals.set('timestampPain001', timestampPain001);",
					"            _pm.globals.set('timestampPain013', timestampPain013);",
					"            _pm.globals.set('messageIdPain001', messageIdPain001);",
					"            _pm.globals.set('messageIdPain013', messageIdPain013);",
					"        }",
					"",
					"        console.log(`\"DataCache\": {",
					"            \"dbtrId\": \"entities/${_pm.globals.get(\"debtorId\")}\",",
					"            \"cdtrId\": \"entities/${_pm.globals.get(\"creditorId\")}\",",
					"            \"dbtrAcctId\": \"accounts/${_pm.globals.get(\"debtorAccountId\")}\",",
					"            \"cdtrAcctId\": \"accounts/${_pm.globals.get(\"creditorAccountId\")}\"",
					"        }`);",
					"        console.log('endToEndId: ' + _pm.globals.get(\"endToEndId\"));",
					"    },",
					"",
					"    createMoreTransactionSets: function (numberOfSets, debtorIdRef, debtorAccountIdRef, creditorIdRef, creditorAccountIdRef, timestampEpoch, timestampIterationLeap, amountRef, transactionDescriptionRef, pacs002StStS, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"        let uuid = require('uuid');",
					"",
					"        const activePain001 = JSON.parse(pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_messagehistory = _pm.environment.get('db_messagehistory');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_transactions = _pm.environment.get('db_coll_graph_transactions');",
					"",
					"        var db_coll_msg_transactionHistoryPain001;",
					"        var db_coll_msg_transactionHistoryPain013;",
					"        if (activePain001) {",
					"            db_coll_msg_transactionHistoryPain001 = _pm.environment.get('db_coll_msg_transactionHistoryPain001');",
					"            db_coll_msg_transactionHistoryPain013 = _pm.environment.get('db_coll_msg_transactionHistoryPain013');",
					"        }",
					"        const db_coll_msg_transactionHistoryPacs008 = _pm.environment.get('db_coll_msg_transactionHistoryPacs008');",
					"        const db_coll_msg_transactionHistoryPacs002 = _pm.environment.get('db_coll_msg_transactionHistoryPacs002');",
					"        const accountsPrefix = 'accounts/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        numberOfSets = numberOfSets ? numberOfSets : 1;",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        if (numberOfSets == 1) {",
					"            timestampIterationLeap = 0",
					"        } else {",
					"            timestampIterationLeap = timestampIterationLeap ? timestampIterationLeap : Math.trunc(timestampEpoch / numberOfSets)",
					"        }",
					"        pacs002StStS = pacs002StStS ? pacs002StStS : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        timestampEpochStart = timestampEpoch;",
					"",
					"        for (let step = 0; step < numberOfSets; step++) {",
					"            // Match incoming parameter or randomise",
					"            let debtorId = debtorIdRef || 'dbtr_' + uuid.v4().replace(/-/g, '');",
					"            let debtorAccountId = debtorAccountIdRef || 'dbtrAcct_' + uuid.v4().replace(/-/g, '');",
					"            let creditorId = creditorIdRef || 'cdtr_' + uuid.v4().replace(/-/g, '');",
					"            let creditorAccountId = creditorAccountIdRef || 'cdtrAcct_' + uuid.v4().replace(/-/g, '');",
					"            let amount = amountRef || Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"            let transactionDescription = transactionDescriptionRef || uuid.v4().replace(/-/g, '');",
					"",
					"            if (!debtorIdRef) {",
					"                utils.createEntity(debtorId);",
					"            }",
					"            if (!creditorIdRef) {",
					"                utils.createEntity(creditorId);",
					"            }",
					"            if (!debtorAccountIdRef) {",
					"                utils.createSingleAccount(debtorId, debtorAccountId);",
					"            }",
					"            if (!creditorAccountIdRef) {",
					"                utils.createSingleAccount(creditorId, creditorAccountId);",
					"            }",
					"",
					"            let timestampPacs008 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 1)).toISOString();",
					"            let timestampPacs002 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 0)).toISOString();",
					"            let endToEndId = uuid.v4().replace(/-/g, '');",
					"            let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"            let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"            var timestampPain001;",
					"            var timestampPain013;",
					"            var messageIdPain001;",
					"            var messageIdPain013;",
					"",
					"            var pain001;",
					"            var pain013;",
					"",
					"            if (activePain001) {",
					"                timestampPain001 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 3)).toISOString();",
					"                timestampPain013 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 2)).toISOString();",
					"                messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"                messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"                pain001 = [utils.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorAccountId, endToEndId, transactionPurpose, amount, creditorId, creditorAccountId, transactionDescription, transactionLat, transactionLong)];",
					"",
					"                pain013 = [utils.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorAccountId, endToEndId, amount, creditorId, creditorAccountId, transactionLat, transactionLong)];",
					"            }",
					"",
					"            const pacs008 = [utils.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, amount, debtorDoB, debtorId, debtorAccountId, creditorId, creditorAccountId, transactionPurpose, transactionDescription, transactionLat, transactionLong)];",
					"",
					"            const pacs002 = [utils.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002StStS)];",
					"",
					"            var transactions = [];",
					"            var postRequests = [];",
					"",
					"            if (activePain001) {",
					"                transactions = utils.prepGraphTransactions(accountsPrefix, debtorAccountId, creditorAccountId, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002StStS, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013);",
					"",
					"                postRequests = [{",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain001}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pain001)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain013}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pain013)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs008)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs002)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(transactions)",
					"                    }",
					"                }];",
					"            } else {",
					"                let transactions = [{",
					"                    \"_from\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                    \"_to\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                    \"TxTp\": \"pacs.008.001.10\",",
					"                    \"CreDtTm\": `${timestampPacs008}`,",
					"                    \"Amt\": amount,",
					"                    \"Ccy\": \"USD\",",
					"                    \"PmtInfId\": `${messageIdPacs008}`,",
					"                    \"EndToEndId\": `${endToEndId}`",
					"                },",
					"                {",
					"                    \"_from\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                    \"_to\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                    \"TxTp\": \"pacs.002.001.12\",",
					"                    \"TxSts\": `${pacs002StStS}`,",
					"                    \"CreDtTm\": `${timestampPacs002}`,",
					"                    \"PmtInfId\": `${messageIdPacs002}`,",
					"                    \"EndToEndId\": `${endToEndId}`",
					"                }]",
					"",
					"                postRequests = [{",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs008)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs002)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(transactions)",
					"                    }",
					"                }];",
					"            }",
					"",
					"            postRequests.forEach((postRequest) => {",
					"                _pm.sendRequest(postRequest, (error, response) => {",
					"                    console.log(error ? error : response.json());",
					"                });",
					"            });",
					"",
					"            if (activePain001) {",
					"                console.log(`Created transaction set ${step + 1}/${numberOfSets} from ${debtorAccountId} to ${creditorAccountId} from pain.001:${timestampPain001} to pacs.002:${timestampPacs002} with EndToEndId ${endToEndId}`);",
					"            } else {",
					"                console.log(`Created transaction set ${step + 1}/${numberOfSets} from ${debtorAccountId} to ${creditorAccountId} from pacs.008:${timestampPacs008} to pacs.002${timestampPacs002} with EndToEndId ${endToEndId}`);",
					"            }",
					"",
					"        }",
					"    },",
					"",
					"    createMoreAccounts: function (entityId, numberOfAccounts) {",
					"        let uuid = require('uuid');",
					"",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_accounts = _pm.environment.get('db_coll_graph_accounts');",
					"        const db_coll_graph_account_holders = _pm.environment.get('db_coll_graph_account_holders');",
					"        const accountsPrefix = 'accounts/';",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        numberOfAccounts = numberOfAccounts ? numberOfAccounts : 0;",
					"",
					"        let timestamp = new Date(new Date(Date.now())).toISOString();",
					"",
					"        const accountIds = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            accountIds.push('acct_' + uuid.v4().replace(/-/g, ''));",
					"        }",
					"",
					"        const accounts = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            accounts.push({ \"_key\": accountIds[step] })",
					"        }",
					"",
					"        const account_holders = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            account_holders.push({",
					"                \"_key\": `${entityId}+${accountIds[step]}`,",
					"                \"_from\": `${entitiesPrefix}` + `${entityId}`,",
					"                \"_to\": `${accountsPrefix}` + `${accountIds[step]}`,",
					"                \"CreDtTm\": timestamp",
					"            });",
					"        }",
					"",
					"        postRequests = [{",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(accounts)",
					"            }",
					"        }, {",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(account_holders)",
					"            }",
					"        }];",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"    },",
					"",
					"    createSingleAccount: function (entityId, accountId) {",
					"        let uuid = require('uuid');",
					"",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_accounts = _pm.environment.get('db_coll_graph_accounts');",
					"        const db_coll_graph_account_holders = _pm.environment.get('db_coll_graph_account_holders');",
					"        const accountsPrefix = 'accounts/';",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        const numberOfAccounts = 1;",
					"",
					"        const timestamp = new Date(new Date(Date.now())).toISOString();",
					"",
					"        const accountIds = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            accountIds.push(accountId);",
					"        }",
					"",
					"        const accounts = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            accounts.push({ \"_key\": accountIds[step] })",
					"        }",
					"",
					"        const account_holders = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            account_holders.push({",
					"                \"_from\": `${entitiesPrefix}` + `${entityId}`,",
					"                \"_to\": `${accountsPrefix}` + `${accountIds[step]}`,",
					"                \"CreDtTm\": `${timestamp}`",
					"            });",
					"        }",
					"",
					"        postRequests = [{",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(accounts)",
					"            }",
					"        }, {",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(account_holders)",
					"            }",
					"        }];",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"    },",
					"",
					"    createEntity: function (entityId) {",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_entities = _pm.environment.get('db_coll_graph_entities');",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Essential defaults",
					"        const timestamp = new Date(new Date(Date.now())).toISOString();",
					"",
					"        const entities = [{",
					"            \"_key\": entityId,",
					"            \"Id\": entityId,",
					"            \"CreDtTm\": timestamp",
					"        }];",
					"",
					"        postRequests = [{",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(entities)",
					"            }",
					"        }];",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"    },",
					"",
					"    createQuickerTransactionSets: function (numberOfSets, debtorIdRef, debtorAccountIdRef, creditorIdRef, creditorAccountIdRef, timestampEpoch, timestampIterationLeap, timestampInterval, amountRef, transactionDescriptionRef, pacs002StStS, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"        let uuid = require('uuid');",
					"",
					"        const activePain001 = JSON.parse(pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_messagehistory = _pm.environment.get('db_messagehistory');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_transactions = _pm.environment.get('db_coll_graph_transactions');",
					"",
					"        var db_coll_msg_transactionHistoryPain001;",
					"        var db_coll_msg_transactionHistoryPain013;",
					"        if (activePain001) {",
					"            db_coll_msg_transactionHistoryPain001 = _pm.environment.get('db_coll_msg_transactionHistoryPain001');",
					"            db_coll_msg_transactionHistoryPain013 = _pm.environment.get('db_coll_msg_transactionHistoryPain013');",
					"        }",
					"        const db_coll_msg_transactionHistoryPacs008 = _pm.environment.get('db_coll_msg_transactionHistoryPacs008');",
					"        const db_coll_msg_transactionHistoryPacs002 = _pm.environment.get('db_coll_msg_transactionHistoryPacs002');",
					"        const accountsPrefix = 'accounts/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        numberOfSets = numberOfSets ? numberOfSets : 1;",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        if (numberOfSets == 1) {",
					"            timestampIterationLeap = 0",
					"        } else {",
					"            timestampIterationLeap = timestampIterationLeap ? timestampIterationLeap : Math.trunc(timestampEpoch / numberOfSets)",
					"        }",
					"        timestampInterval = timestampInterval ? timestampInterval : 300000; // 300,000 milliseconds = 5 minutes",
					"        pacs002StStS = pacs002StStS ? pacs002StStS : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        timestampEpochStart = timestampEpoch;",
					"",
					"        for (let step = 0; step < numberOfSets; step++) {",
					"            // Match incoming parameter or randomise",
					"            let debtorId = debtorIdRef || 'dbtr_' + uuid.v4().replace(/-/g, '');",
					"            let debtorAccountId = debtorAccountIdRef || 'dbtrAcct_' + uuid.v4().replace(/-/g, '');",
					"            let creditorId = creditorIdRef || 'cdtr_' + uuid.v4().replace(/-/g, '');",
					"            let creditorAccountId = creditorAccountIdRef || 'cdtrAcct_' + uuid.v4().replace(/-/g, '');",
					"            let amount = amountRef || Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"            let transactionDescription = transactionDescriptionRef || uuid.v4().replace(/-/g, '');",
					"",
					"            if (!debtorIdRef) {",
					"                utils.createEntity(debtorId);",
					"            }",
					"            if (!creditorIdRef) {",
					"                utils.createEntity(creditorId);",
					"            }",
					"            if (!debtorAccountIdRef) {",
					"                utils.createSingleAccount(debtorId, debtorAccountId);",
					"            }",
					"            if (!creditorAccountIdRef) {",
					"                utils.createSingleAccount(creditorId, creditorAccountId);",
					"            }",
					"",
					"            let timestampPacs008 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 1)).toISOString();",
					"            let timestampPacs002 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 0)).toISOString();",
					"            let endToEndId = uuid.v4().replace(/-/g, '');",
					"            let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"            let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"            var timestampPain001;",
					"            var timestampPain013;",
					"            var messageIdPain001;",
					"            var messageIdPain013;",
					"",
					"            var pain001;",
					"            var pain013;",
					"",
					"            if (activePain001) {",
					"                timestampPain001 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 3)).toISOString();",
					"                timestampPain013 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 2)).toISOString();",
					"                messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"                messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"                pain001 = [utils.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorAccountId, endToEndId, transactionPurpose, amount, creditorId, creditorAccountId, transactionDescription, transactionLat, transactionLong)];",
					"",
					"                pain013 = [utils.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorAccountId, endToEndId, amount, creditorId, creditorAccountId, transactionLat, transactionLong)];",
					"            }",
					"",
					"            const pacs008 = [utils.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, amount, debtorDoB, debtorId, debtorAccountId, creditorId, creditorAccountId, transactionPurpose, transactionDescription, transactionLat, transactionLong)];",
					"",
					"            const pacs002 = [utils.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002StStS)];",
					"",
					"            var transactions = [];",
					"            var postRequests = [];",
					"",
					"            if (activePain001) {",
					"                transactions = utils.prepGraphTransactions(accountsPrefix, debtorAccountId, creditorAccountId, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002StStS, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013);",
					"",
					"                postRequests = [{",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain001}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pain001)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain013}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pain013)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs008)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs002)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(transactions)",
					"                    }",
					"                }];",
					"            } else {",
					"                transactions = utils.prepGraphTransactions(accountsPrefix, debtorAccountId, creditorAccountId, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002StStS);",
					"",
					"                postRequests = [{",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs008)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs002)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(transactions)",
					"                    }",
					"                }];",
					"            }",
					"",
					"            postRequests.forEach((postRequest) => {",
					"                _pm.sendRequest(postRequest, (error, response) => {",
					"                    console.log(error ? error : response.json());",
					"                });",
					"            });",
					"",
					"            if (activePain001) {",
					"                console.log(`Created transaction set ${step + 1}/${numberOfSets} from ${debtorAccountId} to ${creditorAccountId} from pain.001:${timestampPain001} to pacs.002:${timestampPacs002} with EndToEndId ${endToEndId}`);",
					"            } else {",
					"                console.log(`Created transaction set ${step + 1}/${numberOfSets} from ${debtorAccountId} to ${creditorAccountId} from pacs.008:${timestampPacs008} to pacs.002${timestampPacs002} with EndToEndId ${endToEndId}`);",
					"            }",
					"",
					"        }",
					"    },",
					"",
					"    createNewTransactionSetInMemory: function (timestampEpoch, amount, transactionDescription, pacs002StStS, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        let uuid = require('uuid');",
					"",
					"        // Variables for test data parameterisation",
					"        const activePain001 = JSON.parse(pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002StStS = pacs002StStS ? pacs002StStS : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = uuid.v4().replace(/-/g, '');",
					"        let creditorId = uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        console.log(\"pacs.002 payload timestamp: \" + timestampPacs002);",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"",
					"        var pain001;",
					"        var pain013;",
					"",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"            pain001 = [utils.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorAccountId, endToEndId, transactionPurpose, amount, creditorId, creditorAccountId, transactionDescription, transactionLat, transactionLong)];",
					"",
					"            pain013 = [utils.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorAccountId, endToEndId, amount, creditorId, creditorAccountId, transactionLat, transactionLong)];",
					"        }",
					"",
					"        const pacs008 = [utils.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, amount, debtorDoB, debtorId, debtorAccountId, creditorId, creditorAccountId, transactionPurpose, transactionDescription, transactionLat, transactionLong)];",
					"",
					"        const pacs002 = [utils.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002StStS)];",
					"",
					"        const dataCache = [{",
					"            \"dbtrId\": `${debtorId}`,",
					"            \"cdtrId\": `${creditorId}`,",
					"            \"dbtrAcctId\": `${debtorAccountId}`,",
					"            \"cdtrAcctId\": `${creditorAccountId}`",
					"        }];",
					"",
					"        console.log('pacs.002 trigger payload: ' + JSON.stringify(pacs002[0]));",
					"",
					"        _pm.globals.set(\"pacs008\", JSON.stringify(pacs008[0]));",
					"        _pm.globals.set(\"pacs002\", JSON.stringify(pacs002[0]));",
					"        _pm.globals.set(\"dataCache\", JSON.stringify(dataCache[0]));",
					"        _pm.globals.set('debtorId', debtorId);",
					"        _pm.globals.set('debtorAccountId', debtorAccountId);",
					"        _pm.globals.set('debtorDoB', debtorDoB);",
					"        _pm.globals.set('creditorId', creditorId);",
					"        _pm.globals.set('creditorAccountId', creditorAccountId);",
					"        _pm.globals.set('timestampPacs008', timestampPacs008);",
					"        _pm.globals.set('timestampPacs002', timestampPacs002);",
					"        _pm.globals.set('endToEndId', endToEndId);",
					"        _pm.globals.set('pacs002StStS', pacs002StStS);",
					"        _pm.globals.set('amount', amount);",
					"        _pm.globals.set('transactionDescription', transactionDescription);",
					"        _pm.globals.set('transactionPurpose', transactionPurpose);",
					"        _pm.globals.set('transactionLat', transactionLat);",
					"        _pm.globals.set('transactionLong', transactionLong);",
					"        _pm.globals.set('messageIdPacs008', messageIdPacs008);",
					"        _pm.globals.set('messageIdPacs002', messageIdPacs002);",
					"        if (activePain001) {",
					"            _pm.globals.set(\"pain001\", JSON.stringify(pain001[0]));",
					"            _pm.globals.set(\"pain013\", JSON.stringify(pain013[0]));",
					"            _pm.globals.set('timestampPain001', timestampPain001);",
					"            _pm.globals.set('timestampPain013', timestampPain013);",
					"            _pm.globals.set('messageIdPain001', messageIdPain001);",
					"            _pm.globals.set('messageIdPain013', messageIdPain013);",
					"        }",
					"",
					"        console.log(`\"DataCache\": {",
					"            \"dbtrId\": \"entities/${_pm.globals.get(\"debtorId\")}\",",
					"            \"cdtrId\": \"entities/${_pm.globals.get(\"creditorId\")}\",",
					"            \"dbtrAcctId\": \"accounts/${_pm.globals.get(\"debtorAccountId\")}\",",
					"            \"cdtrAcctId\": \"accounts/${_pm.globals.get(\"creditorAccountId\")}\"",
					"        }`);",
					"        console.log('endToEndId: ' + _pm.globals.get(\"endToEndId\"));",
					"",
					"        if (activePain001) {",
					"            console.log(`Message IDs:",
					"                pain.001: ${_pm.globals.get(\"messageIdPain001\")}\",",
					"                pain.013: ${_pm.globals.get(\"messageIdPain013\")}\",",
					"                pacs.008: ${_pm.globals.get(\"messageIdPacs008\")}\",",
					"                pacs.002: ${_pm.globals.get(\"messageIdPacs002\")}\"",
					"            `);",
					"        } else {",
					"            console.log(`Message IDs:",
					"                pain.001: disabled\",",
					"                pain.013: disabled\",",
					"                pacs.008: ${_pm.globals.get(\"messageIdPacs008\")}\",",
					"                pacs.002: ${_pm.globals.get(\"messageIdPacs002\")}\"",
					"            `);",
					"        }",
					"    },",
					"",
					"    createAdditionalTransactionSetInMemory: function (debtorIdRef, debtorAccountIdRef, creditorIdRef, creditorAccountIdRef, timestampEpoch, amount, transactionDescription, pacs002StStS, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        let uuid = require('uuid');",
					"",
					"        // Variables for test data parameterisation",
					"        const activePain001 = JSON.parse(pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002StStS = pacs002StStS ? pacs002StStS : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = debtorIdRef || 'dbtr_' + uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = debtorAccountIdRef || 'dbtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let creditorId = creditorIdRef || 'cdtr_' + uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = creditorAccountIdRef || 'cdtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        console.log(\"pacs.002 payload timestamp: \" + timestampPacs002);",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"",
					"        var pain001;",
					"        var pain013;",
					"",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"            pain001 = [utils.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorAccountId, endToEndId, transactionPurpose, amount, creditorId, creditorAccountId, transactionDescription, transactionLat, transactionLong)];",
					"",
					"            pain013 = [utils.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorAccountId, endToEndId, amount, creditorId, creditorAccountId, transactionLat, transactionLong)];",
					"        }",
					"",
					"        const pacs008 = [utils.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, amount, debtorDoB, debtorId, debtorAccountId, creditorId, creditorAccountId, transactionPurpose, transactionDescription, transactionLat, transactionLong)];",
					"",
					"        const pacs002 = [utils.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002StStS)];",
					"",
					"        const dataCache = [{",
					"            \"dbtrId\": `${debtorId}`,",
					"            \"cdtrId\": `${creditorId}`,",
					"            \"dbtrAcctId\": `${debtorAccountId}`,",
					"            \"cdtrAcctId\": `${creditorAccountId}`",
					"        }]",
					"",
					"        console.log('pacs.002 trigger payload: ' + JSON.stringify(pacs002[0]));",
					"",
					"        _pm.globals.set(\"pacs008\", JSON.stringify(pacs008[0]));",
					"        _pm.globals.set(\"pacs002\", JSON.stringify(pacs002[0]));",
					"        _pm.globals.set(\"dataCache\", JSON.stringify(dataCache[0]));",
					"        _pm.globals.set('debtorId', debtorId);",
					"        _pm.globals.set('debtorAccountId', debtorAccountId);",
					"        _pm.globals.set('debtorDoB', debtorDoB);",
					"        _pm.globals.set('creditorId', creditorId);",
					"        _pm.globals.set('creditorAccountId', creditorAccountId);",
					"        _pm.globals.set('timestampPacs008', timestampPacs008);",
					"        _pm.globals.set('timestampPacs002', timestampPacs002);",
					"        _pm.globals.set('endToEndId', endToEndId);",
					"        _pm.globals.set('pacs002StStS', pacs002StStS);",
					"        _pm.globals.set('amount', amount);",
					"        _pm.globals.set('transactionDescription', transactionDescription);",
					"        _pm.globals.set('transactionPurpose', transactionPurpose);",
					"        _pm.globals.set('transactionLat', transactionLat);",
					"        _pm.globals.set('transactionLong', transactionLong);",
					"        _pm.globals.set('messageIdPacs008', messageIdPacs008);",
					"        _pm.globals.set('messageIdPacs002', messageIdPacs002);",
					"        if (activePain001) {",
					"            _pm.globals.set(\"pain001\", JSON.stringify(pain001[0]));",
					"            _pm.globals.set(\"pain013\", JSON.stringify(pain013[0]));",
					"            _pm.globals.set('timestampPain001', timestampPain001);",
					"            _pm.globals.set('timestampPain013', timestampPain013);",
					"            _pm.globals.set('messageIdPain001', messageIdPain001);",
					"            _pm.globals.set('messageIdPain013', messageIdPain013);",
					"        }",
					"",
					"        console.log(`\"DataCache\": {",
					"            \"dbtrId\": \"entities/${_pm.globals.get(\"debtorId\")}\",",
					"            \"cdtrId\": \"entities/${_pm.globals.get(\"creditorId\")}\",",
					"            \"dbtrAcctId\": \"accounts/${_pm.globals.get(\"debtorAccountId\")}\",",
					"            \"cdtrAcctId\": \"accounts/${_pm.globals.get(\"creditorAccountId\")}\"",
					"        }`);",
					"        console.log('endToEndId: ' + _pm.globals.get(\"endToEndId\"));",
					"",
					"        if (activePain001) {",
					"            console.log(`Message IDs:",
					"                pain.001: ${_pm.globals.get(\"messageIdPain001\")}\",",
					"                pain.013: ${_pm.globals.get(\"messageIdPain013\")}\",",
					"                pacs.008: ${_pm.globals.get(\"messageIdPacs008\")}\",",
					"                pacs.002: ${_pm.globals.get(\"messageIdPacs002\")}\"",
					"            `);",
					"        } else {",
					"            console.log(`Message IDs:",
					"                pain.001: disabled\",",
					"                pain.013: disabled\",",
					"                pacs.008: ${_pm.globals.get(\"messageIdPacs008\")}\",",
					"                pacs.002: ${_pm.globals.get(\"messageIdPacs002\")}\"",
					"            `);",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}